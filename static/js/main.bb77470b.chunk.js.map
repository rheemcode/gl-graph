{"version":3,"sources":["WebGL/GLContext.ts","reduxStore/hooks.ts","Utils/helper.ts","reducers/nodesFilter.ts","Componets/GLCanvas.tsx","Componets/Tabs/RenderTab.tsx","Componets/TabManager.tsx","ShaderGraphWindow.tsx","Componets/GraphComponents/ContentContainer.tsx","Componets/Icons/DoubleCircleIcon.tsx","Componets/GraphComponents/InOutNode.tsx","Componets/GraphComponents/Node.tsx","Componets/GraphComponents/NodePanel.tsx","Componets/GraphComponents/TitleBar.tsx","Componets/GraphComponents/Builtins/Builtins.tsx","Componets/GraphComponents/GLFuncs/GLFuncs.tsx","Componets/GraphComponents/DataTypes/DataTypes.tsx","Graph/builtins.ts","Componets/GraphComponents/ContextMenu.tsx","Componets/Tabs/GraphTab.tsx","Utils/getNodeComponent.tsx","WebGL/Buffer.ts","WebGL/GLShader.ts","WebGL/Texture.ts","WebGL/GLRenderer.ts","Componets/Menus.tsx","App.tsx","reportWebVitals.ts","reducers/index.ts","reduxStore/index.ts","index.tsx"],"names":["BufferType","BufferUsage","ShaderType","ShaderParameter","GLDataType","PrimitiveMode","useAppDispatch","useDispatch","useAppSelector","useSelector","generatedUID","characterList","getRandomInt","min","max","Math","ceil","floor","random","generateUID","uid","uidLength","char","find","val","push","computeNodeValue","id","prefixVal","count","delimeter","swap","nodeState","nodeIndex","node","element","index","nodeValue","nodeValueVar","inputs","inputData","value","inputNodeIndex","nodeInput","highestInputIndex","i","getDistanceToMouse","mouse","bb","vec","offset","x","right","y","bottom","offsetAbs","abs","dir","width","height","sqrt","initialState","nodeStates","defaultNodeState","nodeName","nodeDataType","props","refs","nodeDataValue","computeNodeValueFn","s","nodeConnectorRef","React","createRef","ref","outputs","outputData","initialConnectorState","type","outputIndex","inputIndex","dragging","connected","updateNodeValue","nodeElem","outputElem","inputedElem","filter","length","WebGL2RenderingContext","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","UNIFORM_BUFFER","STATIC_DRAW","DYNAMIC_DRAW","STREAM_DRAW","VERTEX_SHADER","FRAGMENT_SHADER","COMPILE_STATUS","LINK_STATUS","FLOAT","INT","LINES","POINTS","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","GLContext","context","glContext","viewport","createProgram","shaderType","createShader","shader","shaderSource","compileShader","program","attachShader","detachShader","deleteShader","linkProgram","deleteProgram","pname","getShaderParameter","useProgram","getProgramParameter","getShaderInfoLog","createBuffer","bufferType","data","usage","bufferData","texParameteri","TEXTURE_2D","this","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","buffer","texImage2D","RGBA","UNSIGNED_BYTE","createTexture","activeTexture","TEXTURE0","texture","bindTexture","name","getAttribLocation","location","getUniformLocation","uniform1i","uniform1f","uniform2f","attribPos","dataType","normalized","stride","vertexAttribPointer","attrib","enableVertexAttribArray","bindBuffer","deleteBuffer","red","green","blue","alpha","clearColor","clear","COLOR_BUFFER_BIT","getError","mode","drawArrays","g_glErrors","cache","pop","error","GLCanvas","forwardRef","canvasElement","useEffect","_glContext","current","getContext","Create","createContextFn","className","glCanvasRef","RenderTab","useState","prototype","glRenderer","setContext","Renderer","requestAnimationFrame","OnRender","window","innerWidth","innerHeight","windowWidth","windowHeight","TabSplit","TabManager","splitTabRef","splitOffset","onResize","computedWidth","computedHeight","canvas","style","graphTabRef","Viewport","onresize","onMouseDown","event","target","shaderGraphWindowRef","cursor","onMouseUp","onMouseMove","mouseX","movementX","left","ShaderGraphWindow","ContentContainer","flex","display","justifyContent","children","DoubleCircleIcon","cx","cy","r","strokeWidth","stroke","fill","ConnectorNode","elems","marginBottom","alignItems","backgroundColor","position","values","TextInputNode","onChange","onChangeFn","BoolInputNode","Node","connectorDispatch","nodeDispatch","connectorState","state","connectorFilter","nodesFilter","thisElem","nodeRefs","outputDataType","outputConnector","nodeOutputConnectorRef","inputConnector","nodeInputConnectorRef","setAttribute","payload","clickFn","connectorFn","elementRef","top","NodePanel","TitleBar","title","GLTexture0","useRef","HTMLDivElement","connectorRef","outputValue","glTexture0","nodeCategory","inputDataTypes","GLTexture1","GLTexture2","GLTexture3","GlFragColor","fragCoordProps","_nodeValue","_nodeValueVar","nodeElemIndex","input","inputNode","GlFragCoord","GlFragDepth","depthProps","GlTime","timeProps","GlResolution","resProps","GlMouseCoords","mouseProps","numDataTypes","vecDataTypes","matDataTypes","allDataTypes","GlTexture","outputConnectorRef","inputConnectorRef","glProps","GlTexelFetch","GlTextureGather","GlTextureProj","GlTextureSize","GlAdd","GlSubstract","GlMultiply","GlDivide","GlAbs","GlCeil","GlFloor","GlFract","GlInvSqrt","GlInf","GlNan","GlMod","GlMin","GlMax","GlLog","GlLog2","GlNoise","GlPow","GlRound","GlRoundEven","GlSign","GlSmoothstep","GlSqrt","GlStep","GlTrunc","GlClamp","GlExp","GlExp2","GlAcos","GlAtan","GlTan","GlTanH","GlAtanH","GlCos","GlCosH","GlAcosH","GlSin","GlSinH","GlASin","GlASinH","GlDegrees","GlRadians","GlCross","GlDot","GlDistance","GlEqual","GlNotEqual","GlFaceForward","GlLength","GlNormalize","GlReflect","GlRefract","GlDeterminant","GlInverse","GlTranspose","GlMatCompMult","GlOuterProduct","GlSelect","selectedIndex","toLowerCase","console","log","vectorInputTypes","Integer","intProps","toString","Number","Boolean","boolProps","checked","Float","EPSILON","floatProps","Vector2","vector2Props","Vector3","vector3Props","Vector4","vector4Props","Matrix3","mat3Props","Matrix4","mat4Props","mathFuncs","trigonometryFuncs","builtinsVariables","vectorFuncs","matrixFuncs","textureSampling","IconDir","viewBox","d","ContextListItem","itemsRef","iconRef","SVGSVGElement","dispatch","toggleListItems","elem","classList","toggle","onClick","itemName","lists","map","el","onClickFn","nodeCount","pageX","pageY","ContextMenu","scale","activeNodeElement","lastActiveNodeElement","activeNodeConnector","oldMousePos","mousePos","INVALID_INDEX","testForConnection","outputNode","inputNodeRef","childElementCount","outputedNodebb","getBoundingClientRect","DOMRect","distance","isInside","outputNodeIndex","isValid","outputNodeId","inputNodeId","handleNodeSelection","elementRefs","border","dispatchFn","connectionResult","handleMouseDraggingConnector","handleNodeConnection","nodeDispatchFn","activeNode","connectionState","inputType","inputDataType","inputNodeElem","validateConnectionState","updateNodePosition","undefined","nodeConnector","pathStart","pathEnd","connector","rect","outputer","outputedNodeElem","handleNodeDeselection","remove","hideContext","graphPanelRef","contextMenuRef","contextVisible","button","contextElem","showContext","pos","NodeConnector","_ref","SVGPathElement","forEach","nodeProps","add","start","end","defaultNodeConnectorRef","ConnectorContainer","curveAmount","flatMap","result","findIndex","GraphTab","setNodeCount","nodesDispatch","addEventListener","ctrlKey","code","shiftKey","preventDefault","handleKeyEvents","onWheel","container","deltaY","transform","pathNode","offsetLeft","offsetTop","handleNodeMovement","onContextMenu","n","getNodeComponent","VertexBuffer","CreateBuffer","Bind","BufferData","BindBuffer","DeleteBuffer","IndexBuffer","QuadBuffer","vertices","verticesBuffer","Float32Array","VertexArray","indexBuffer","vertexBuffer","aVertexPosLocation","GetAttribLocation","aTexCoordLocation","EnableVertexAtrribArray","VertexAttribPointer","GLShader","vertexSource","fragmentSource","vertexShader","CompilerShader","WEBGL","VERTEX","fragmentShader","FRAGMENT","CreateProgram","AttachShader","LinkProgram","GetProgramParameter","AddError","DetachShader","DeleteShader","SetUniformFloat","SetUniformVec2","UseProgram","DeleteProgram","CreateShader","ShaderSource","CompileShader","GetShaderParameter","GetShaderInfoLog","GLTexture2D","texture0","CreateTexture","texture1","texture2","texture3","SetTextureIndex","ActivateTexture","BindTexture","img","SetTexture","SetTextureParams","vertexShaderSource","created","InitShader","vertexArray","AddVertexBuffer","SetUpAttribs","Init","_fragmentShaderSource","UpdateShaders","Update","time","UploadUniformFloat","UploadUniformVec2","SetClearColor","ClearColorBuffer","DrawQuad","DrawArrays","CodeIcon","focusable","aria-hidden","CompileButton","shaderCode","nodeElement","glGraphType","getGLGraphToGLSLDataType","UpdateCompiledShader","AddNodeButton","currentTarget","AddIcon","UploadTexture","textureViewPanelRef","Texture","fileInputRef","HTMLInputElement","imgRef","HTMLImageElement","inputElem","imgElem","imageFile","files","item","src","URL","createObjectURL","onload","UpdateTexture","revokeObjectURL","accept","alt","click","TextureViewPanel","AppHeader","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","_el","arr","oldVal","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb77470b.chunk.js","sourcesContent":["import { off } from \"process\";\r\nimport { Vec2 } from \"Utils/helper\";\r\n\r\ndeclare interface GLShader extends WebGLShader { }\r\n\r\nexport declare interface GLProgram extends WebGLProgram { }\r\nexport declare interface GLBuffer extends WebGLBuffer { }\r\nexport declare interface GLTexture extends WebGLTexture { }\r\n\r\n// sorry i thought i was writing c++\r\n\r\nexport enum BufferType {\r\n    ELEMENT_ARRAY_BUFFER = WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER,\r\n    ARRAY_BUFFER = WebGL2RenderingContext.ARRAY_BUFFER,\r\n    UNIFORM_BUFFER = WebGL2RenderingContext.UNIFORM_BUFFER\r\n}\r\n\r\nexport enum BufferUsage {\r\n    STATIC_DRAW = WebGL2RenderingContext.STATIC_DRAW,\r\n    DYNAMIC_DRAW = WebGL2RenderingContext.DYNAMIC_DRAW,\r\n    STREAM_DRAW = WebGL2RenderingContext.STREAM_DRAW\r\n}\r\n\r\nexport enum ShaderType {\r\n    VERTEX = WebGL2RenderingContext.VERTEX_SHADER,\r\n    FRAGMENT = WebGL2RenderingContext.FRAGMENT_SHADER\r\n}\r\n\r\nexport enum ShaderParameter {\r\n    COMPILE_STATUS = WebGL2RenderingContext.COMPILE_STATUS,\r\n    LINK_STATUS = WebGL2RenderingContext.LINK_STATUS\r\n}\r\n\r\nexport enum GLDataType {\r\n    FLOAT = WebGL2RenderingContext.FLOAT,\r\n    INT = WebGL2RenderingContext.INT\r\n}\r\n\r\nexport enum PrimitiveMode {\r\n    LINES = WebGL2RenderingContext.LINES,\r\n    POINTS = WebGL2RenderingContext.POINTS,\r\n    TRIANGLES = WebGL2RenderingContext.TRIANGLES,\r\n    TRIANGLE_STRIP = WebGL2RenderingContext.TRIANGLE_STRIP,\r\n    TRIANGLE_FAN = WebGL2RenderingContext.TRIANGLE_FAN\r\n}\r\n\r\n\r\ndeclare type Attribs = \"aVertexPos\" | \"aTexCoord\"\r\n\r\nexport class GLContext {\r\n    private static glContext: WebGL2RenderingContext;\r\n\r\n    Create(context: WebGL2RenderingContext) {\r\n        GLContext.glContext = context;\r\n    }\r\n\r\n    static Viewport(x: number, y: number, width: number, height: number) {\r\n        GLContext.glContext.viewport(x, y, width, height);\r\n    }\r\n\r\n    static CreateProgram(): GLProgram {\r\n        return GLContext.glContext.createProgram() as GLProgram\r\n    }\r\n\r\n    static CreateShader(shaderType: ShaderType): GLShader {\r\n        let shader = GLContext.glContext.createShader(shaderType);\r\n        return shader as GLShader;\r\n    }\r\n\r\n    static ShaderSource(shader: GLShader, shaderSource: string) {\r\n        GLContext.glContext.shaderSource(shader, shaderSource);\r\n    }\r\n\r\n    static CompileShader(shader: GLShader) {\r\n        GLContext.glContext.compileShader(shader);\r\n    }\r\n\r\n    static AttachShader(program: GLProgram, shader: GLShader) {\r\n        GLContext.glContext.attachShader(program, shader);\r\n    }\r\n\r\n    static DetachShader(program: GLProgram, shader: GLShader) {\r\n        GLContext.glContext.detachShader(program, shader);\r\n    }\r\n\r\n    static DeleteShader(shader: GLShader) {\r\n        GLContext.glContext.deleteShader(shader);\r\n    }\r\n\r\n    static LinkProgram(program: GLProgram) {\r\n        GLContext.glContext.linkProgram(program);\r\n    }\r\n\r\n    static DeleteProgram(program: GLProgram) {\r\n        GLContext.glContext.deleteProgram(program);\r\n    }\r\n\r\n    static GetShaderParameter(shader: GLShader, pname: number) {\r\n        return GLContext.glContext.getShaderParameter(shader, pname);\r\n    }\r\n\r\n    static UseProgram(program: GLProgram) {\r\n        GLContext.glContext.useProgram(program);\r\n    }\r\n\r\n    static GetProgramParameter(shader: GLProgram, pname: number) {\r\n        return GLContext.glContext.getProgramParameter(shader, pname);\r\n    }\r\n\r\n\r\n    static GetShaderInfoLog(shader: GLShader) {\r\n        return GLContext.glContext.getShaderInfoLog(shader);\r\n    }\r\n\r\n    static CreateBuffer() {\r\n        return GLContext.glContext.createBuffer() as GLBuffer;\r\n    }\r\n\r\n    static BufferData(bufferType: BufferType, data: ArrayBuffer, usage: BufferUsage) {\r\n\r\n        GLContext.glContext.bufferData(bufferType, data, usage);\r\n    }\r\n\r\n    static SetTextureParams() {\r\n        GLContext.glContext.texParameteri(GLContext.glContext.TEXTURE_2D, this.glContext.TEXTURE_WRAP_S, GLContext.glContext.CLAMP_TO_EDGE);\r\n        this.glContext.texParameteri(this.glContext.TEXTURE_2D, this.glContext.TEXTURE_WRAP_T, this.glContext.CLAMP_TO_EDGE);\r\n        this.glContext.texParameteri(this.glContext.TEXTURE_2D, this.glContext.TEXTURE_MIN_FILTER, this.glContext.LINEAR);\r\n    }\r\n\r\n    static SetTexture(width: number, height: number, buffer: TexImageSource) {\r\n        GLContext.glContext.texImage2D(WebGL2RenderingContext.TEXTURE_2D, 0, GLContext.glContext.RGBA, width, height, 0, GLContext.glContext.RGBA, GLContext.glContext.UNSIGNED_BYTE, buffer);\r\n    }\r\n\r\n    static CreateTexture(): GLTexture | null {\r\n        return this.glContext.createTexture();\r\n    }\r\n\r\n    static ActivateTexture(index: number) {\r\n        GLContext.glContext.activeTexture(GLContext.glContext.TEXTURE0 + index);\r\n    }\r\n\r\n    static BindTexture(texture: GLTexture) {\r\n        GLContext.glContext.bindTexture(GLContext.glContext.TEXTURE_2D, texture);\r\n    }\r\n\r\n    static GetAttribLocation(program: GLProgram, name: Attribs) {\r\n        return GLContext.glContext.getAttribLocation(program, name);\r\n    }\r\n\r\n    static SetTextureIndex(program: GLProgram, name: string, index: number) {\r\n        const location = GLContext.glContext.getUniformLocation(program, name);\r\n        GLContext.glContext.uniform1i(location, index);\r\n    }\r\n\r\n    static SetUniformFloat(program: GLProgram, name: string, value: number) {\r\n        const location = GLContext.glContext.getUniformLocation(program, name);\r\n        GLContext.glContext.uniform1f(location, value);\r\n    }\r\n\r\n    static SetUniformVec2(program: GLProgram, name: string, value: Vec2) {\r\n        const location = GLContext.glContext.getUniformLocation(program, name);\r\n        GLContext.glContext.uniform2f(location, value.x, value.y);\r\n    }\r\n\r\n    static VertexAttribPointer(attribPos: number, count: number, dataType: GLDataType, normalized: boolean, stride: number, offset: number) {\r\n        GLContext.glContext.vertexAttribPointer(attribPos, count, dataType, normalized, stride, offset);\r\n    }\r\n\r\n    static EnableVertexAtrribArray(attrib: number) {\r\n        GLContext.glContext.enableVertexAttribArray(attrib);\r\n    }\r\n\r\n    static BindBuffer(bufferType: BufferType, buffer: GLBuffer) {\r\n        GLContext.glContext.bindBuffer(bufferType, buffer);\r\n    }\r\n\r\n    static DeleteBuffer(bufferType: GLBuffer) {\r\n        GLContext.glContext.deleteBuffer(bufferType);\r\n    }\r\n\r\n    static SetClearColor(red: number, green: number, blue: number, alpha: number) {\r\n        GLContext.glContext.clearColor(red, green, blue, alpha);\r\n    }\r\n\r\n    static ClearColorBuffer() {\r\n        GLContext.glContext.clear(GLContext.glContext.COLOR_BUFFER_BIT);\r\n    }\r\n\r\n    static GetErrors() {\r\n        return GLContext.glContext.getError();\r\n    }\r\n\r\n    static DrawArrays(mode: PrimitiveMode, count: number) {\r\n        GLContext.glContext.drawArrays(this.glContext.TRIANGLE_STRIP, 0, 4);\r\n    }\r\n}\r\n\r\nexport class GLErrors {\r\n    cache: any[] = []\r\n    GetError(count = 1) {\r\n        if (this.cache.length) {\r\n            return this.cache.pop() as any;\r\n        }\r\n    }\r\n\r\n    AddError(error: any) {\r\n        this.cache.push(error)\r\n    }\r\n}\r\n\r\nexport let g_glErrors = new GLErrors();","import { Dispatch } from \"react\";\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState, RootDispatch } from \".\";\r\n\r\nexport const useAppDispatch = () => useDispatch<Dispatch<RootDispatch>>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { GLType, NodeState, UID } from \"reducers/nodesFilter\";\r\n\r\nlet generatedUID: UID[] = []\r\nconst characterList = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"i\", \"j\", \"k\", \"l\"];\r\n\r\nconst getRandom = (min: number, max: number) => {\r\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nconst getRandomInt = (min: number, max: number) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\n\r\nexport const generateUID = () => {\r\n    var uid = \"\"\r\n    let uidLength = 15;\r\n    while (uidLength) {\r\n        var char = getRandomInt(0, 10);\r\n        if (getRandom(0, 10) <= 5) {\r\n            uid += characterList[char]\r\n        }\r\n        else {\r\n            uid += getRandomInt(0, 10);\r\n        }\r\n        uidLength--;\r\n    }\r\n\r\n    if (generatedUID.find((val) => val == uid)) {\r\n        generateUID();\r\n    }\r\n    generatedUID.push(uid);\r\n    return uid;\r\n}\r\n\r\n\r\nexport const swap = (a: any, b: any) => {\r\n    let [temp1, temp2] = [a, b];\r\n    a = temp2;\r\n    b = temp1;\r\n}\r\n\r\n/**\r\n * Helper function that calculates value of an element based on the supplied input\r\n * @param id computed element id\r\n * @param prefixVal element return type i.e `vec2`\r\n * @param count element input count i.e `vec2(1, 1)`\r\n * @param delimeter element separator i.e \",\" \"+\"\r\n * @returns computed element value based on input supplied\r\n */\r\nexport const computeNodeValue = (id: UID, prefixVal: string, count: number, delimeter = \",\", swap = false) => {\r\n    return (nodeState: NodeState[]): string[] => {\r\n\r\n        let nodeIndex = -1;\r\n        let node = nodeState.find((element, index) => {\r\n            if (element.id === id) {\r\n                nodeIndex = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        }) as NodeState;\r\n\r\n        let nodeValue = prefixVal + \"(\";\r\n        let nodeValueVar = prefixVal + \"(\";\r\n\r\n        if (node) {\r\n            if (count === 1) {\r\n                nodeValue += `${node.inputs[0].inputData.value})`;\r\n                nodeValueVar += `_${node.inputs[0].id})`;\r\n\r\n                let inputNodeIndex = -1;\r\n                const nodeInput = nodeState.find((value, index) => {\r\n                    if (value.id === node.inputs[0].id) {\r\n                        inputNodeIndex = index;\r\n                        return true;\r\n                    };\r\n\r\n                    return false;\r\n                }) as NodeState;\r\n\r\n\r\n                if (inputNodeIndex > nodeIndex) {\r\n                    nodeState[nodeIndex] = nodeInput;\r\n                    nodeState[inputNodeIndex] = node;\r\n                }\r\n\r\n                return [nodeValue, nodeValueVar];\r\n            }\r\n\r\n            let highestInputIndex = 0;\r\n            for (let i = 0; i < count; i++) {\r\n                let val = node.inputs[i];\r\n                let inputNodeIndex = -1;\r\n\r\n                const nodeInput = nodeState.find((value, index) => {\r\n                    if (value) {\r\n                        if (node.inputs[i]) {\r\n                            if (value.id === node.inputs[i].id) {\r\n                                inputNodeIndex = index;\r\n                                return true;\r\n                            };\r\n\r\n                        }\r\n                    }\r\n\r\n\r\n                    return false;\r\n                }) as NodeState;\r\n\r\n                if (!nodeInput)\r\n                    continue;\r\n\r\n                if (inputNodeIndex > highestInputIndex) {\r\n                    highestInputIndex = inputNodeIndex;\r\n                }\r\n\r\n                if (val) {\r\n                    nodeValue += val.inputData.value;\r\n                    nodeValueVar += `_${node.inputs[i].id}`;\r\n                }\r\n                else {\r\n                    nodeValue += 0;\r\n                    nodeValueVar += 0;\r\n                }\r\n\r\n                if (i != count - 1) {\r\n                    nodeValue += delimeter;\r\n                    nodeValueVar += delimeter;\r\n                }\r\n\r\n                if (highestInputIndex > nodeIndex && i === (count - 1)) {\r\n                    nodeState[highestInputIndex] = node;\r\n                    nodeState[nodeIndex] = nodeInput;\r\n                }\r\n            }\r\n            nodeValue += \")\";\r\n            nodeValueVar += \")\";\r\n\r\n            return swap ? [nodeValue, nodeValueVar] : [nodeValueVar, nodeValue];\r\n        }\r\n        nodeValue += \")\";\r\n        nodeValueVar += \")\";\r\n\r\n        return swap ? [nodeValue, nodeValueVar] : [nodeValueVar, nodeValue];\r\n    }\r\n}\r\n\r\n/**\r\n * Flattens Dom element tree to a single Array\r\n */\r\nexport const flattenElementTree = (element: Element, result: Element[]) => {\r\n    for (var i = 0; i < element.childElementCount; i++) {\r\n\r\n        var val = element.children[i];\r\n        if (val.childElementCount > 0) {\r\n            flattenElementTree(val, result);\r\n        }\r\n        else {\r\n            result.push(val);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Helper Vector2 interface\r\n */\r\nexport interface Vec2 {\r\n    x: number,\r\n    y: number,\r\n}\r\n\r\n/**\r\n * Returns length of Vector2 object\r\n */\r\nexport const Vec2length = (vec: Vec2): number => {\r\n    return Math.sqrt(vec.x * vec.x + vec.y * vec.y);\r\n}\r\n\r\n/**\r\n * Returns Distance of DOM element Rect to mouse position, useful for checking if mouse collides with a DOM element\r\n * @param mouse mouse position\r\n * @param bb DOM element bounding box or DOMRect\r\n */\r\nexport const getDistanceToMouse = (mouse: Vec2, bb: DOMRect): number => {\r\n    const offset: Vec2 = { x: ((bb.x + bb.right) * 0.5) - mouse.x, y: ((bb.y + bb.bottom) * 0.5) - mouse.y };\r\n    const offsetAbs: Vec2 = { x: Math.abs(offset.x), y: Math.abs(offset.y) };\r\n    const dir: Vec2 = { x: Math.max(0, offsetAbs.x - (bb.width / 2)), y: Math.max(0, offsetAbs.y - (bb.height / 2)) };\r\n    return Vec2length(dir);\r\n}\r\n\r\n\r\nexport const getGLGraphToGLSLDataType = (glGraphType: GLType) => {\r\n    switch (glGraphType) {\r\n        case \"Boolean\": return \"bool\";\r\n        case \"Integer\": return \"int\";\r\n        case \"Float\": return \"float\";\r\n        case \"Vector2\": return \"vec2\";\r\n        case \"Vector3\": return \"vec3\";\r\n        case \"Vector4\": return \"vec4\";\r\n        case \"Matrix3\": return \"mat3\";\r\n        case \"Matrix4\": return \"mat4\";\r\n    }\r\n}\r\n","import { INodeRefs } from \"Componets/GraphComponents/Node\";\r\nimport React from \"react\";\r\n\r\n\r\ninterface Vector2 {\r\n    x: FloatType,\r\n    y: FloatType;\r\n};\r\n\r\ninterface Vector3 {\r\n    x: FloatType,\r\n    y: FloatType,\r\n    z: FloatType;\r\n};\r\n\r\ninterface Vector4 {\r\n    x: FloatType,\r\n    y: FloatType,\r\n    z: FloatType;\r\n    w: FloatType;\r\n}\r\n\r\ninterface Matrix3 {\r\n    m0: Vector3;\r\n    m1: Vector3;\r\n    m2: Vector3;\r\n}\r\n\r\ninterface Matrix4 {\r\n    m0: Vector4,\r\n    m1: Vector4,\r\n    m2: Vector4,\r\n    m3: Vector4,\r\n}\r\nexport type AnyType = any;\r\nexport type BoolType = Boolean;\r\nexport type IntType = number;\r\nexport type FloatType = number;\r\nexport type Vector2Type = Vector2;\r\nexport type Vector3Type = Vector3;\r\nexport type Vector4Type = Vector4;\r\nexport type Matrix3Type = Matrix3;\r\nexport type Matrix4Type = Matrix4;\r\n\r\nexport type UID = string;\r\n\r\nexport interface NodeData {\r\n    value: string | FloatType | IntType | BoolType | Vector2Type | Vector3Type | Vector4Type | Matrix3Type | Matrix4Type;\r\n}\r\n\r\nexport interface NodeInput {\r\n    id: UID;\r\n    index: number;\r\n    ref: INodeRefs | null,\r\n    nodeConnectorRef: React.RefObject<SVGPathElement>;\r\n    inputData: NodeData;\r\n}\r\n\r\n//probably redundant\r\ninterface NodeOutput {\r\n    id: UID;\r\n    index: number;\r\n    ref: INodeRefs | null\r\n    outputData: NodeData\r\n}\r\n\r\ninterface NodeProps {\r\n    x: number;\r\n    y: number;\r\n    refs: INodeRefs | null,\r\n    nodeDataValue: NodeData;\r\n}\r\nexport type GLType = \"Any\" | \"Sampler2D\" | \"Integer\" | \"Float\" | \"Boolean\" | \"Vector\" | \"Vector2\" | \"Vector3\" | \"Vector4\" | \"Matrix\" | \"Matrix3\" | \"Matrix4\"\r\n\r\n\r\nexport interface NodeState {\r\n    id: UID;\r\n    nodeName: string;\r\n    nodeDataType: GLType,\r\n    props: NodeProps;\r\n    inputs: NodeInput[]\r\n    outputs: NodeOutput[]\r\n    computeNodeValueFn: (nodeStates: NodeState[]) => string[];\r\n}\r\n\r\nexport interface ConnectorState {\r\n    type: \"Input\" | \"Output\" | \"NULL\";\r\n    inputIndex: number;\r\n    outputIndex: number;\r\n    dragging: boolean;\r\n    connected: boolean;\r\n    elementRef?: React.RefObject<HTMLDivElement>;\r\n\r\n}\r\n\r\ntype NODE_ACTION = \"ADD_NODE\" | \"REMOVE_NODE\" | \"UPDATE_NODE\" | \"UPDATE_PROPS\" | \"UPDATE_NODE_VALUE\" | \"UPDATE_OUTPUT_TYPE\" | \"REMOVE_NODE_INPUT\";\r\ntype CONNECTOR_ACTION = \"FINDING\" | \"CONNECTED\" | \"RELEASE\"\r\n\r\nexport interface NodeDispatch {\r\n    type: NODE_ACTION;\r\n    payload: NodeState;\r\n}\r\n\r\nexport interface ConnectorDispatch {\r\n    type: CONNECTOR_ACTION;\r\n    payload: ConnectorState;\r\n}\r\n\r\nexport interface AppState {\r\n    nodeStates: NodeState[]\r\n}\r\n\r\nconst initialState: AppState = { nodeStates: [] };\r\n\r\nexport const defaultNodeState: NodeState = {\r\n    id: \"\",\r\n    nodeName: \"\",\r\n    nodeDataType: \"Any\",\r\n    props:\r\n    {\r\n        x: 0, y: 0,\r\n        refs: null,\r\n        nodeDataValue: { value: 0 }\r\n    },\r\n\r\n    computeNodeValueFn: (s) => [\"\"],\r\n    inputs: [\r\n        {\r\n            id: \"\",\r\n            index: 0,\r\n            inputData: { value: 0 },\r\n            nodeConnectorRef: React.createRef(),\r\n            ref: null\r\n        }],\r\n    outputs: [\r\n        {\r\n            id: \"\",\r\n            index: 0, // TODO: handle nodes with multiple output\r\n            outputData: { value: 0 },\r\n            ref: null\r\n        }]\r\n}\r\nconst initialConnectorState: ConnectorState = { type: \"NULL\", outputIndex: -1, inputIndex: -1, dragging: false, connected: false }\r\n\r\n/**\r\n * recursively updates the node element values\r\n * @param nodeStates node state\r\n * @param nodeElem updated node elements\r\n */\r\nconst updateNodeValue = (nodeStates: NodeState[], nodeElem: NodeState) => {\r\n\r\n    // iterate over node Elements output\r\n    for (let i = 0; i < nodeElem.outputs.length; i++) {\r\n        if (nodeElem.outputs[i].id) {\r\n            // find ouputed node Element in node state\r\n            const outputElem = nodeStates.find((value) => {\r\n                if (value)\r\n                    return value.id === nodeElem.outputs[i].id\r\n            });\r\n\r\n            if (outputElem) {\r\n                // find the output index of the oupting element \r\n                let inputedElem = outputElem.inputs.find((value) => {\r\n                    if (value) {\r\n                        return (nodeElem.id === value.id) && (nodeElem.outputs[i].index === value.index);\r\n                    }\r\n\r\n                    return false;\r\n                })\r\n\r\n                if (inputedElem) {\r\n                    // update the input value to the latest and the ouput value of the outputed element based on the input\r\n                    inputedElem.inputData.value = nodeElem.props.nodeDataValue.value;\r\n                    const [nodeValue, nodeValueVar] = outputElem.computeNodeValueFn(nodeStates)\r\n                    outputElem.props.nodeDataValue.value = nodeValueVar;\r\n                }\r\n\r\n                // remove default outputs or invalid outputs\r\n                outputElem.outputs = outputElem.outputs.filter((val) => val.id);\r\n\r\n                // if the outputed element also has outputs then update them as well\r\n                if (outputElem.outputs.length > 1) {\r\n                    updateNodeValue(nodeStates, outputElem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const connectorFilter = (state = initialConnectorState, action: ConnectorDispatch): ConnectorState => {\r\n    switch (action.type) {\r\n        case \"FINDING\": {\r\n            return action.payload;\r\n        }\r\n        case \"CONNECTED\": {\r\n            return action.payload;\r\n        }\r\n        case \"RELEASE\": {\r\n            return action.payload;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const nodesFilter = (state = initialState, action: NodeDispatch): AppState => {\r\n    switch (action.type) {\r\n        case \"ADD_NODE\": {\r\n            state.nodeStates.push(action.payload);\r\n            \r\n            return { ...state, nodeStates: state.nodeStates };\r\n        }\r\n        case \"REMOVE_NODE\": {\r\n            state.nodeStates = state.nodeStates.filter((val) => val.id !== action.payload.id);\r\n            state.nodeStates.forEach((element) => {\r\n                element.outputs = element.outputs.filter((val) => val.id !== action.payload.id);\r\n                element.inputs = element.inputs.map((val) => {\r\n                    if (val) {\r\n                        if (val.id === action.payload.id) return null;\r\n                        return val\r\n                    }\r\n                }) as NodeInput[];\r\n            });\r\n            \r\n\r\n            return state;\r\n        }\r\n\r\n        case \"REMOVE_NODE_INPUT\": {\r\n\r\n            let value = state.nodeStates.find((value) => {\r\n                return value.id === action.payload.id;\r\n            }) as NodeState;\r\n\r\n            if (value) {\r\n                value.inputs = value.inputs.map((val) => {\r\n                    if (val) {\r\n                        if (val.index === action.payload.inputs[0].index) {\r\n                            let el = state.nodeStates.find((el) => { return el.id === val.id; });\r\n                            if (el) {\r\n                                el.outputs = el.outputs.filter((_el) => {\r\n                                    if ((_el.id === value.id) && (_el.index === val.index)) {\r\n                                        return false;\r\n                                    };\r\n                                    return true;\r\n                                });\r\n\r\n                            }\r\n                            return null;\r\n                        };\r\n                        return val;\r\n                    };// value.inputs.map((val)\r\n                }) as NodeInput[];\r\n            };\r\n            \r\n\r\n            return state;\r\n        };\r\n\r\n        case \"UPDATE_NODE\": {\r\n            state.nodeStates.forEach((value, index, arr) => {\r\n                \r\n                \r\n                if (value.id === action.payload.id) {\r\n                    if (!value.props.refs)\r\n                        value.props.refs = action.payload.props.refs;\r\n                    if (action.payload.inputs[0].ref) {\r\n                        if (value.inputs[action.payload.inputs[0].index]) {\r\n\r\n                            let oldVal = arr.find((element) => value.inputs[action.payload.inputs[0].index].id === element.id)\r\n                            if (oldVal) {\r\n\r\n                                oldVal.outputs = oldVal.outputs.filter((elem) => {\r\n                                    if ((elem.id === action.payload.id))\r\n                                        if (elem.index === action.payload.inputs[0].index) {\r\n                                            return false;\r\n                                        }\r\n                                    return true;\r\n\r\n                                });\r\n                            }\r\n\r\n                        }\r\n                        // [0] because you can only dispatch one action at a time\r\n                        value.inputs[action.payload.inputs[0].index] = action.payload.inputs[0];\r\n                        const outputer = arr.find((value) => value.id === action.payload.inputs[0].id);\r\n                        if (outputer) {\r\n                            value.inputs[action.payload.inputs[0].index].inputData = outputer.props.nodeDataValue;\r\n                        }\r\n\r\n                        value.props.nodeDataValue = { value: value.computeNodeValueFn(state.nodeStates)[1] }\r\n                        updateNodeValue(arr, value);\r\n                    }\r\n                    value.outputs = value.outputs.filter((val) => { if (val.id) return true; return false; });\r\n                    if (action.payload.outputs[0].id) {\r\n                        value.outputs.push(action.payload.outputs[0]);\r\n                    }\r\n                    return;\r\n                }\r\n            });\r\n            \r\n\r\n            return state;\r\n        }\r\n\r\n        case \"UPDATE_OUTPUT_TYPE\": {\r\n            let activeNode = state.nodeStates.find((val) => val.id === action.payload.id);\r\n            if (activeNode)\r\n                activeNode.nodeDataType = action.payload.nodeDataType;\r\n            \r\n\r\n            return state;\r\n        }\r\n\r\n        case \"UPDATE_PROPS\": {\r\n\r\n            let value = state.nodeStates.find((value) => { return value.id === action.payload.id; });\r\n            if (value) {\r\n                value.props.refs = action.payload.props.refs;\r\n                value.props.nodeDataValue = action.payload.props.nodeDataValue;\r\n                value.nodeDataType = action.payload.nodeDataType;\r\n                value.computeNodeValueFn = action.payload.computeNodeValueFn;\r\n                value.outputs.filter((val) => { if (val) return val.id; return false; });\r\n\r\n            }\r\n            \r\n\r\n            return state;\r\n        }\r\n\r\n        case \"UPDATE_NODE_VALUE\": {\r\n            state.nodeStates.forEach((element, index, arr) => {\r\n                element.outputs.filter((val) => { if (val) return val.id; return false; });\r\n                if (element.id == action.payload.id) {\r\n\r\n                    element.props.nodeDataValue = action.payload.props.nodeDataValue;\r\n                    updateNodeValue(arr, element);\r\n\r\n                }\r\n                return;\r\n            });\r\n            \r\n\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { GLContext } from \"../WebGL/GLContext\";\r\n\r\ndeclare interface GLCanvasProps {\r\n    createContextFn: Function\r\n}\r\n\r\n\r\nexport const GLCanvas = React.forwardRef<any, GLCanvasProps>((props, canvasElement) => {\r\n\r\n    useEffect(() => {\r\n        let canvasRef = canvasElement as React.RefObject<HTMLCanvasElement>;\r\n        let canvas = canvasRef.current as HTMLCanvasElement;\r\n        const _glContext = canvas.getContext(\"webgl2\") as WebGL2RenderingContext;\r\n        const glContext = new GLContext();\r\n        glContext.Create(_glContext);\r\n\r\n        props.createContextFn(glContext);\r\n    }, []);\r\n\r\n    return <canvas ref={canvasElement} className=\"GLCanvas\"></canvas>;\r\n});\r\n","\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { GLContext } from \"../../WebGL/GLContext\";\r\nimport { Renderer } from \"../../WebGL/GLRenderer\";\r\nimport { GLCanvas } from \"../GLCanvas\";\r\n\r\n\r\nexport const glCanvasRef = React.createRef<HTMLCanvasElement>();\r\n\r\nexport const RenderTab: React.FC = (props) => {\r\n    const [glRenderer, setContext] = useState<GLContext>(GLContext.prototype);\r\n\r\n    useEffect(() => {\r\n        Renderer.Create();\r\n        requestAnimationFrame(Renderer.OnRender)\r\n\r\n    }, [glRenderer]);\r\n\r\n\r\n    return (\r\n        <div className=\"RenderTab\">\r\n            <GLCanvas ref={glCanvasRef} createContextFn={setContext} />\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { shaderGraphWindowRef } from \"../ShaderGraphWindow\";\r\nimport { GLContext } from \"../WebGL/GLContext\";\r\nimport { graphTabRef, GraphTab } from \"./Tabs/GraphTab\";\r\nimport { RenderTab, glCanvasRef } from \"./Tabs/RenderTab\";\r\n\r\ninterface WindowProps {\r\n    width: number;\r\n    height: number;\r\n    aspectRatio?: number;\r\n}\r\n\r\nlet [windowWidth, windowHeight] = [window.innerWidth, window.innerHeight];\r\n\r\nconst TabSplit = React.forwardRef<any, {}>((props, ref) => {\r\n    return <div className=\"TabSplit\" ref={ref} ></div >\r\n});\r\n\r\n\r\nexport const TabManager: React.FC = () => {\r\n    const splitTabRef = React.createRef<HTMLDivElement>();\r\n\r\n    let splitOffset = window.innerWidth * 0.5;\r\n    let dragging = false;\r\n\r\n    const computeSplitPos = (event: React.MouseEvent) => {\r\n        if (!dragging)\r\n            return;\r\n\r\n        let mouseX = splitOffset >= 30 ? event.movementX : event.movementX <= 0 ? 0 : event.movementX;\r\n        splitOffset += mouseX;\r\n\r\n        const node = splitTabRef.current as HTMLDivElement;\r\n        node.style.left = `${splitOffset}px`;\r\n        onResize();\r\n    }\r\n\r\n    const onStartDrag = (event: React.MouseEvent<HTMLDivElement>) => {\r\n        if (event.target == splitTabRef.current) {\r\n            let windowRef = shaderGraphWindowRef.current as HTMLDivElement;\r\n            windowRef.style.cursor = \"w-resize\";\r\n            dragging = true;\r\n        }\r\n    }\r\n\r\n    const onEndDrag = () => {\r\n        dragging = false;\r\n        let windowRef = shaderGraphWindowRef.current as HTMLDivElement;\r\n        windowRef.style.cursor = \"auto\";\r\n    }\r\n\r\n    const onResize = () => {\r\n        windowWidth = window.innerWidth;\r\n        windowHeight = window.innerHeight;\r\n\r\n        let ratio = windowWidth / windowHeight;\r\n        let computedWidth = splitOffset;\r\n        let computedHeight = computedWidth / ratio;\r\n        let canvas = glCanvasRef.current as HTMLCanvasElement;\r\n        canvas.width = computedWidth;\r\n        canvas.height = computedHeight;\r\n        canvas.style.width = computedWidth + \"px\";\r\n        canvas.style.height = computedHeight + \"px\";\r\n\r\n        let graphTab = graphTabRef.current as HTMLDivElement;\r\n        graphTab.style.width = (windowWidth - computedWidth) + \"px\";\r\n        GLContext.Viewport(0, 0, computedWidth, windowHeight);\r\n    }\r\n\r\n    window.onresize = onResize;\r\n\r\n    return (\r\n        <div className=\"TabManager\" onMouseDown={onStartDrag} onMouseUp={onEndDrag} onMouseMove={computeSplitPos}>\r\n            <RenderTab />\r\n            <TabSplit ref={splitTabRef} />\r\n            <GraphTab />\r\n        </div >\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { TabManager } from \"./Componets/TabManager\";\r\n\r\nexport const ShaderGraphWindow: React.FC = () => {\r\n\r\n    return (\r\n        <div ref={shaderGraphWindowRef}>\r\n            <TabManager />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const shaderGraphWindowRef = React.createRef<HTMLDivElement>();","import { CSSProperties } from \"react\";\r\n\r\ninterface ContentContainerProps {\r\n    flex: boolean;\r\n}\r\n\r\nexport const ContentContainer: React.FC<ContentContainerProps> = (props) => {\r\n    const style: CSSProperties = {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\"\r\n    }\r\n\r\n    if (props.flex) {\r\n\r\n        return (\r\n\r\n            <div style={style} className=\"ContentContainer\">\r\n                {\r\n                    props.children\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n\r\n            <div className=\"ContentContainer\">\r\n                {\r\n                    props.children\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","\r\nexport const DoubleCircleIcon: React.FC = () => {\r\n    return (\r\n        <svg className=\"DoubleCircleIcon\" width=\"14\" height=\"14\">\r\n            <circle cx=\"50%\" cy=\"50%\" r=\"5\" strokeWidth=\"2\" stroke=\"#999999\" fill=\"transparent\" />\r\n            <circle cx=\"50%\" cy=\"50%\" r=\"3\" strokeWidth=\"2\" stroke=\"transparent\" fill=\"transparent\" />\r\n        </svg>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { CSSProperties } from \"react\"\r\nimport { DoubleCircleIcon } from \"../Icons/DoubleCircleIcon\"\r\n\r\ninterface NodeProps {\r\n    type: \"Input\" | \"Output\"\r\n    values: string[];\r\n    count: number;\r\n}\r\n\r\nexport const ConnectorNode = React.forwardRef<HTMLDivElement, NodeProps>((props, ref) => {\r\n    let elems = []\r\n    const style: CSSProperties = {\r\n        display: \"flex\",\r\n        marginBottom: \".2em\",\r\n        alignItems: \"center\"\r\n    }\r\n    switch (props.type) {\r\n        case \"Input\": {\r\n            for (var i = 0; i < props.count; i++) {\r\n                elems.push(\r\n                    <div key={i} style={style}>\r\n                        <div style={{ backgroundColor: \"grey\", position: \"absolute\", width: \"1.4em\", height: \".25rem\", left: \"0\" }}></div>\r\n                        <DoubleCircleIcon />\r\n                        <p>{props.values[i]}</p>\r\n                    </div>\r\n                )\r\n            }\r\n            break;\r\n        }\r\n\r\n        case \"Output\": {\r\n            for (var i = 0; i < props.count; i++) {\r\n                elems.push(\r\n                    <div key={i} id={`{i}`} style={{ ...style, justifyContent: \"flex-end\" }} >\r\n                        <p>{props.values[i]}</p>\r\n                        <DoubleCircleIcon />\r\n                        <div style={{ backgroundColor: \"grey\", position: \"absolute\", width: \"1.4em\", height: \".25rem\", right: \"0\" }}></div>\r\n                    </div >\r\n                )\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div ref={ref} className={props.type + \"Node\"}>\r\n            {elems}\r\n        </div>\r\n    )\r\n});\r\n\r\ninterface InputProps {\r\n    onChangeFn: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const TextInputNode: React.FC<InputProps> = (props) => {\r\n    return (\r\n        <div className=\"TextInputNode\">\r\n            <input type=\"text\" name=\"\" id=\"\" onChange={props.onChangeFn} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const BoolInputNode: React.FC<InputProps> = (props) => {\r\n    return (\r\n        <div className=\"BoolInputNode\">\r\n            <input type=\"checkbox\" onChange={props.onChangeFn} name=\"\" value=\"unchecked\" id=\"\" />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { AppState, ConnectorDispatch, ConnectorState, GLType, defaultNodeState, NodeDispatch, NodeState, UID } from \"reducers/nodesFilter\";\r\nimport { useAppDispatch, useAppSelector } from \"reduxStore/hooks\";\r\n\r\nexport type NodeClickFn = (nodeRefs: INodeRefs, dispathFn: React.Dispatch<ConnectorDispatch>) => (event: React.MouseEvent) => void;\r\nexport type ConnectorFn = (elementRefs: INodeRefs, nodeDispatchFn: React.Dispatch<NodeDispatch>, connectorDispatch: React.Dispatch<ConnectorDispatch>, nodeState: AppState, connectorState: ConnectorState) => (event: React.MouseEvent) => void;\r\n\r\n\r\ntype NodeCategory = \"Builtins\" | \"Data Types\" | \"Math\" | \"Trigonometry\" | \"Vector\" | \"Matrix\" | \"Texture\";\r\n\r\nexport interface INodeRefs {\r\n    id: UID;\r\n    name: string;\r\n    nodeCategory: NodeCategory;\r\n    outputDataType: GLType;\r\n    inputDataTypes: GLType[],\r\n    elementRef: React.MutableRefObject<HTMLDivElement>;\r\n    nodeOutputConnectorRef: React.MutableRefObject<HTMLDivElement>;\r\n    nodeInputConnectorRef: React.MutableRefObject<HTMLDivElement> | null;\r\n}\r\n\r\nexport interface NodeProps {\r\n    id: UID;\r\n    x: number;\r\n    y: number;\r\n    value: string;\r\n    nodeRefs: INodeRefs | null;\r\n    clickFn: NodeClickFn;\r\n    connectorFn: ConnectorFn;\r\n    computeNodeValueFn: (n: NodeState[]) => string[];\r\n};\r\n\r\n// Dumb! why not include useRef here instead of repeating in every component\r\nexport const Node = React.forwardRef<HTMLDivElement, NodeProps>((props, ref) => {\r\n    const connectorDispatch: React.Dispatch<ConnectorDispatch> = useAppDispatch();\r\n    const nodeDispatch: React.Dispatch<NodeDispatch> = useAppDispatch();\r\n    const connectorState: ConnectorState = useAppSelector((state) => state.connectorFilter);\r\n    const nodeState: AppState = useAppSelector((state) => state.nodesFilter);\r\n\r\n    useEffect(() => {\r\n        const thisElem = nodeState.nodeStates.find((val) => val.id === props.id);\r\n        if (props.nodeRefs) {\r\n            if (props.nodeRefs.outputDataType === \"Any\" || props.nodeRefs.outputDataType === \"Vector\" || props.nodeRefs.outputDataType === \"Matrix\") {\r\n                props.nodeRefs.outputDataType = thisElem?.nodeDataType as GLType;\r\n\r\n            }\r\n\r\n        }\r\n        const outputConnector = props.nodeRefs?.nodeOutputConnectorRef.current;\r\n        const inputConnector = props.nodeRefs?.nodeInputConnectorRef?.current;\r\n        outputConnector?.children[0].children[1].children[1].setAttribute(\"fill\", \"transparent\");\r\n\r\n        if (inputConnector?.children) {\r\n            for (let childNode of inputConnector?.children) {\r\n                childNode.children[1].children[1].setAttribute(\"fill\", \"transparent\");\r\n            }\r\n        }\r\n\r\n\r\n        if (thisElem?.outputs) {\r\n            if (thisElem?.outputs.length) {\r\n                if (thisElem?.outputs[0].id || thisElem?.outputs.length > 1) {\r\n                    outputConnector?.children[0].children[1].children[1].setAttribute(\"fill\", \"grey\");\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        if (thisElem?.inputs) {\r\n            for (let i = 0; i < thisElem.inputs.length; i++) {\r\n                if (thisElem.inputs[i]) {\r\n                    inputConnector?.children[thisElem.inputs[i].index].children[1].children[1].setAttribute(\"fill\", \"grey\");\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        nodeDispatch({ type: \"UPDATE_PROPS\", payload: { ...defaultNodeState, id: props.id, nodeDataType: props.nodeRefs?.outputDataType as GLType, computeNodeValueFn: props.computeNodeValueFn, props: { x: 0, y: 0, refs: props.nodeRefs, nodeDataValue: { value: props.value } } } })\r\n    }, [/*props.nodeRefs?.elementRef*/])\r\n\r\n    return (\r\n        <div onMouseDown={props.clickFn(props.nodeRefs as INodeRefs, connectorDispatch)}\r\n            onMouseUp={props.connectorFn(props.nodeRefs as INodeRefs, nodeDispatch, connectorDispatch, nodeState, connectorState)}\r\n            //    onMouseEnter={props.connectorFn(props.nodeRefs as INodeRefs, nodeDispatch, connectorDispatch, connectorState)}\r\n            onMouseMove={props.connectorFn(props.nodeRefs as INodeRefs, nodeDispatch, connectorDispatch, nodeState, connectorState)}\r\n\r\n            ref={props.nodeRefs?.elementRef}\r\n            id={`${props.id}`}\r\n            key={props.id}\r\n            className={`Node`}\r\n            style={{ left: `${props.x}px`, top: `${props.y}px` }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n});\r\n","\r\nexport const NodePanel: React.FC = (props) => {\r\n    return (\r\n        <div className=\"NodePanel\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n","\r\ninterface TitleBarProps {\r\n    title: string;\r\n}\r\n\r\nexport const TitleBar: React.FC<TitleBarProps> = (props) => {\r\n    return (\r\n        <div className=\"TitleBar\">\r\n            <p>{props.title}</p>\r\n        </div>\r\n    );\r\n};","import React, { useRef } from \"react\";\r\nimport { NodeState } from \"reducers/nodesFilter\";\r\nimport { ContentContainer } from \"../ContentContainer\";\r\nimport { ConnectorNode } from \"../InOutNode\";\r\nimport { Node, NodeProps } from \"../Node\";\r\nimport { NodePanel } from \"../NodePanel\";\r\nimport { TitleBar } from \"../TitleBar\";\r\n\r\nexport const GLTexture0: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"glTexture0\";\r\n    const glTexture0: NodeProps = {\r\n        ...props,\r\n        value: outputValue,\r\n        nodeRefs: {\r\n            id: props.id,\r\n            nodeCategory: \"Builtins\",\r\n            name: outputValue,\r\n            inputDataTypes: [],\r\n            outputDataType: \"Sampler2D\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: connectorRef,\r\n            nodeInputConnectorRef: null\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glTexture0}>\r\n            <NodePanel>\r\n                <TitleBar title=\"glTexture0\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node >\r\n    )\r\n}\r\n\r\nexport const GLTexture1: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"glTexture1\";\r\n    const glTexture0: NodeProps = {\r\n        ...props,\r\n        value: outputValue,\r\n        nodeRefs: {\r\n            id: props.id,\r\n            nodeCategory: \"Builtins\",\r\n            name: outputValue,\r\n            inputDataTypes: [],\r\n            outputDataType: \"Sampler2D\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: connectorRef,\r\n            nodeInputConnectorRef: null\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glTexture0}>\r\n            <NodePanel>\r\n                <TitleBar title=\"glTexture1\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node >\r\n    )\r\n}\r\n\r\nexport const GLTexture2: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"glTexture2\";\r\n    const glTexture0: NodeProps = {\r\n        ...props,\r\n        value: outputValue,\r\n        nodeRefs: {\r\n            id: props.id,\r\n            nodeCategory: \"Builtins\",\r\n            name: outputValue,\r\n            inputDataTypes: [],\r\n            outputDataType: \"Sampler2D\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: connectorRef,\r\n            nodeInputConnectorRef: null\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glTexture0}>\r\n            <NodePanel>\r\n                <TitleBar title=\"glTexture2\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node >\r\n    )\r\n}\r\n\r\n\r\nexport const GLTexture3: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"glTexture3\";\r\n    const glTexture0: NodeProps = {\r\n        ...props,\r\n        value: outputValue,\r\n        nodeRefs: {\r\n            id: props.id,\r\n            nodeCategory: \"Builtins\",\r\n            name: outputValue,\r\n            inputDataTypes: [],\r\n            outputDataType: \"Sampler2D\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: connectorRef,\r\n            nodeInputConnectorRef: null\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glTexture0}>\r\n            <NodePanel>\r\n                <TitleBar title=\"glTexture3\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node >\r\n    )\r\n}\r\n\r\nexport const GlFragColor: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"gl_FragColor\";\r\n\r\n    const computeNodeValueFn = (nodeState: NodeState[]) => {\r\n        let _nodeValue = \"\";\r\n        let _nodeValueVar = \"\"\r\n        let nodeElemIndex = -1;\r\n        let nodeElem = nodeState.find((value, index) => { nodeElemIndex = index; return value.id === props.id }) as NodeState;\r\n\r\n\r\n        for (let input of nodeElem?.inputs) {\r\n            if (input) {\r\n                if (input.id) {\r\n\r\n                    let inputNodeIndex = -1\r\n                    let inputNode = nodeState.find((value, index) => { inputNodeIndex = index; return value.id == input.id; }) as NodeState;\r\n\r\n                    _nodeValue = `${input.inputData.value}`;\r\n                    _nodeValueVar = `_${input.id}`\r\n\r\n                    if (inputNodeIndex > nodeElemIndex) {\r\n                        nodeState[inputNodeIndex] = nodeElem;\r\n                        nodeState[nodeElemIndex] = inputNode;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n        return [_nodeValue, _nodeValueVar];\r\n    };\r\n\r\n    const fragCoordProps: NodeProps = {\r\n        ...props,\r\n        value: outputValue,\r\n        computeNodeValueFn,\r\n        nodeRefs: {\r\n            id: props.id,\r\n            nodeCategory: \"Builtins\",\r\n            name: outputValue,\r\n            inputDataTypes: [\"Vector4\"],\r\n            outputDataType: \"Vector4\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef:\r\n                connectorRef,\r\n            nodeInputConnectorRef: connectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...fragCoordProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"gl_FragColor\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Input\" ref={connectorRef} count={1} values={[\"In(4)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlFragCoord: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"gl_FragCoord\";\r\n    const fragCoordProps: NodeProps = { ...props, value: outputValue, nodeRefs: { id: props.id, nodeCategory: \"Builtins\", name: outputValue, inputDataTypes: [], outputDataType: \"Vector4\", elementRef: ref, nodeOutputConnectorRef: connectorRef, nodeInputConnectorRef: null } };\r\n\r\n    return (\r\n        <Node {...fragCoordProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"gl_FragCoord\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(4)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n\r\nexport const GlFragDepth: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"gl_FragDepth\";\r\n    const depthProps: NodeProps = { ...props, value: outputValue, nodeRefs: { id: props.id, nodeCategory: \"Builtins\", name: outputValue, inputDataTypes: [], outputDataType: \"Float\", elementRef: ref, nodeOutputConnectorRef: connectorRef, nodeInputConnectorRef: null } };\r\n\r\n    return (\r\n        <Node {...depthProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"gl_FragDepth\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    );\r\n};\r\n\r\nexport const GlTime: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"iTime\";\r\n    const timeProps: NodeProps = { ...props, value: outputValue, nodeRefs: { id: props.id, nodeCategory: \"Builtins\", name: outputValue, inputDataTypes: [], outputDataType: \"Float\", elementRef: ref, nodeOutputConnectorRef: connectorRef, nodeInputConnectorRef: null } };\r\n\r\n    return (\r\n        <Node {...timeProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"iTime\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    );\r\n};\r\n\r\nexport const GlResolution: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"iResolution\";\r\n    const resProps: NodeProps = { ...props, value: outputValue, nodeRefs: { id: props.id, nodeCategory: \"Builtins\", name: outputValue, inputDataTypes: [], outputDataType: \"Vector2\", elementRef: ref, nodeOutputConnectorRef: connectorRef, nodeInputConnectorRef: null } };\r\n\r\n\r\n    return (\r\n        <Node {...resProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"iResolution\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(2)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlMouseCoords: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const outputValue = \"iMouseCoords\";\r\n    const mouseProps: NodeProps = { ...props, value: outputValue, nodeRefs: { id: props.id, nodeCategory: \"Builtins\", name: outputValue, inputDataTypes: [], outputDataType: \"Vector2\", elementRef: ref, nodeOutputConnectorRef: connectorRef, nodeInputConnectorRef: null } };\r\n\r\n\r\n    return (\r\n        <Node {...mouseProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"iMouseCoord\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(2)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};","import React, { useRef, useState } from \"react\";\r\nimport { defaultNodeState, GLType, NodeState } from \"reducers/nodesFilter\";\r\nimport { useAppDispatch, useAppSelector } from \"reduxStore/hooks\";\r\nimport { computeNodeValue } from \"Utils/helper\";\r\nimport { ContentContainer } from \"../ContentContainer\";\r\nimport { ConnectorNode, TextInputNode } from \"../InOutNode\";\r\nimport { Node, NodeProps } from \"../Node\";\r\nimport { NodePanel } from \"../NodePanel\";\r\nimport { TitleBar } from \"../TitleBar\";\r\n\r\nconst numDataTypes: GLType[] = [\"Integer\", \"Float\"]\r\nconst vecDataTypes: GLType[] = [\"Vector2\", \"Vector3\", \"Vector4\"]\r\nconst matDataTypes: GLType[] = [\"Matrix3\", \"Matrix4\"]\r\nconst allDataTypes: GLType[] = [...numDataTypes, ...vecDataTypes, ...matDataTypes];\r\n\r\nexport const GlTexture: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"texture\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        computeNodeValueFn: computeNodeValue(props.id, nodeName, 2, \",\", true),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Texture\",\r\n            inputDataTypes: [...vecDataTypes, \"Sampler2D\"],\r\n            outputDataType: \"Vector4\",\r\n            name: \"texture\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef,\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"In(1)\", \"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlTexelFetch: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"texelFetch\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        computeNodeValueFn: computeNodeValue(props.id, nodeName, 2, \",\", true),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Texture\",\r\n            inputDataTypes: [...vecDataTypes, \"Sampler2D\"],\r\n            outputDataType: \"Vector4\",\r\n            name: \"texelFetch\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef,\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"In(1)\", \"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlTextureGather: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"textureGather\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        computeNodeValueFn: computeNodeValue(props.id, nodeName, 2, \",\", true),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Texture\",\r\n            inputDataTypes: [...vecDataTypes, \"Sampler2D\"],\r\n            outputDataType: \"Vector4\",\r\n            name: \"textureGather\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef,\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"In(1)\", \"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlTextureProj: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"textureProj\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        computeNodeValueFn: computeNodeValue(props.id, nodeName, 2, \",\", true),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Texture\",\r\n            inputDataTypes: [...vecDataTypes, \"Sampler2D\"],\r\n            outputDataType: \"Vector4\",\r\n            name: \"textureProj\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef,\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"In(1)\", \"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlTextureSize: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"textureSize\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        computeNodeValueFn: computeNodeValue(props.id, nodeName, 1, \",\", true),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Texture\",\r\n            inputDataTypes: [...vecDataTypes, \"Sampler2D\"],\r\n            outputDataType: \"Vector2\",\r\n            name: \"textureSize\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef,\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n\r\nexport const GlAdd: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"add\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"\", 2, \"+\"),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: \"add\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef,\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"In(1)\", \"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlSubstract: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"substract\";\r\n    let nodeValue = \"\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"\", 2, \"-\"),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"In(1)\", \"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlMultiply: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"multiply\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"\", 2, \"*\"),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: allDataTypes,\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"multiply\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"In(1)\", \"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlDivide: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"divide\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"\", 2, \"/\"),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: allDataTypes,\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"divide\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"In(1)\", \"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlAbs: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"abs\";\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"abs\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"abs\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlCeil: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"ceil\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"ceil\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"ceil\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlFloor: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"floor\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"floor\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"floor\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlFract: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"fract\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"fract\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"fract\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlInvSqrt: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"inversesqrt\";\r\n\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"inversesqrt\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"inversesqrt\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlInf: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"isinf\";\r\n\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"isinf\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Boolean\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"isinf\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlNan: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"isnan\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"isnan\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Boolean\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"isnan\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlMod: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"mod\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"mod\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"mod\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlMin: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"min\";\r\n\r\n    let nodeValue = \"min(0, 0)\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"min\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"min\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlMax: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"max\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"max\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"max\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlLog: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"log\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"log\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"log\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n\r\nexport const GlLog2: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"log2\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"log2\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"log2\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlNoise: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"noise\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"noise\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlPow: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"pow\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"pow\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"pow\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n\r\nexport const GlRound: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"round\";\r\n\r\n    let nodeValue = \"\";\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"round\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"round\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlRoundEven: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"roundEven\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"roundEven\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"roundEven\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n\r\nexport const GlSign: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"sign\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"sign\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlSmoothstep: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"smoothstep\";\r\n\r\n\r\n    let nodeValue = \"\";\r\n\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"smoothstep\", 3),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={3} values={[\"E1(1)\", \"E2(1)\", \"X(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlSqrt: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"sqrt\";\r\n\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"sqrt\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlStep: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"step\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"step\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"E1(1)\", \"X(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlTrunc: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"trunc\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"trunc\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlClamp: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"clamp\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"clamp\", 3),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={3} values={[\"Val(1)\", \"min(1)\", \"max(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlExp: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"exp\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"exp\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"Val(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlExp2: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"exp2\";\r\n\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"exp2\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n// Trigonometry Functions\r\nexport const GlAcos: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"acos\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"acos\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlAtan: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"atan\";\r\n\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"atan\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlTan: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"tan\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"atan\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlTanH: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"tanh\";\r\n\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"tanh\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlAtanH: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"atanh\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"atanh\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlCos: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"cos\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"cos\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlCosH: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"cosh\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"cosh\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlAcosH: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"acosh\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"acosh\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    ;\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlSin: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"sin\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"sin\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlSinH: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"sinh\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"sinh\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlASin: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"asin\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"asin\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlASinH: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"asinh\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"asinh\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlDegrees: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"degrees\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"degrees\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlRadians: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"radians\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"radians\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Trigonometry\",\r\n            inputDataTypes: [...numDataTypes, ...vecDataTypes],\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"In(1)\",]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n// Vectors Manipulation\r\nexport const GlCross: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"cross\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"cross\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: vecDataTypes,\r\n            outputDataType: \"Vector\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlDot: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"dot\";\r\n    let nodeValue = \"\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"dot\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: vecDataTypes,\r\n            outputDataType: \"Float\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlDistance: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"distance\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"distance\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: vecDataTypes,\r\n            outputDataType: \"Vector\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlEqual: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"equal\";\r\n    let nodeValue = \"\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"equal\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: allDataTypes,\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlNotEqual: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"notEqual\";\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"notEqual\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: allDataTypes,\r\n            outputDataType: \"Any\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlFaceForward: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"faceforward\";\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"faceforward\", 3),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: vecDataTypes,\r\n            outputDataType: \"Vector\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={3} values={[\"X(1)\", \"Y(1)\", \"R(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlLength: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"length\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"length\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: vecDataTypes,\r\n            outputDataType: \"Float\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"X(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlNormalize: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"normalize\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"normalize\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: vecDataTypes,\r\n            outputDataType: \"Vector\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"X(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlReflect: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"reflect\";\r\n    let nodeValue = \"\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"reflect\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: vecDataTypes,\r\n            outputDataType: \"Vector\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"I(1)\", \"N(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlRefract: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"refract\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"refract\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Vector\",\r\n            inputDataTypes: vecDataTypes,\r\n            outputDataType: \"Vector\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"I(1)\", \"N(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n// Matrix Manipulation\r\n\r\nexport const GlDeterminant: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"determinant\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"determinant\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Matrix\",\r\n            inputDataTypes: matDataTypes,\r\n            outputDataType: \"Matrix\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"M(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlInverse: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"inverse\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"inverse\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Matrix\",\r\n            inputDataTypes: matDataTypes,\r\n            outputDataType: \"Matrix\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"M(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlTranspose: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"transpose\";\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"transpose\", 1),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Matrix\",\r\n            inputDataTypes: matDataTypes,\r\n            outputDataType: \"Matrix\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"M(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlMatCompMult: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"matrixCompMult\";\r\n    let nodeValue = \"\";\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"matrixCompMult\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Matrix\",\r\n            inputDataTypes: matDataTypes,\r\n            outputDataType: \"Matrix\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"M1(1)\", \"M2(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlOuterProduct: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeName = \"outerProduct\";\r\n\r\n    let nodeValue = \"\";\r\n\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue,\r\n        computeNodeValueFn: computeNodeValue(props.id, \"outerProduct\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Matrix\",\r\n            inputDataTypes: matDataTypes,\r\n            outputDataType: \"Matrix\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"V1(1)\", \"V2(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const GlSelect: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeDispatch = useAppDispatch();\r\n    const nodeStates = useAppSelector((state) => state.nodesFilter.nodeStates)\r\n    const nodeName = \"select\";\r\n\r\n    const selectedIndex = useRef(\"x\");\r\n    const nodeValue = useRef(\"\");\r\n    //const [selectedIndex, setSelectedIndex] = useState({ value: \"x\" });\r\n\r\n    const computeNodeValueFn = (nodeState: NodeState[], s = \"\") => {\r\n        let _nodeValue = \"\";\r\n        let _nodeValueVar = \"\"\r\n        let nodeElemIndex = -1;\r\n        let nodeElem = nodeState.find((value, index) => { nodeElemIndex = index; return value.id === props.id }) as NodeState;\r\n        nodeValue.current = \"\";\r\n\r\n        for (let input of nodeElem?.inputs) {\r\n            if (input) {\r\n                if (input.id) {\r\n\r\n                    let inputNodeIndex = -1\r\n                    let inputNode = nodeState.find((value, index) => { inputNodeIndex = index; return value.id == input.id; }) as NodeState;\r\n\r\n                    _nodeValue = `${input.inputData.value}.${selectedIndex.current}`;\r\n                    _nodeValueVar = `_${input.id}.${selectedIndex.current}`\r\n\r\n                    if (inputNodeIndex > nodeElemIndex) {\r\n                        nodeState[inputNodeIndex] = nodeElem;\r\n                        nodeState[nodeElemIndex] = inputNode;\r\n                    }\r\n                    nodeValue.current = _nodeValue;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return [_nodeValue, _nodeValueVar];\r\n    };\r\n\r\n    const glProps: NodeProps = {\r\n        ...props,\r\n        value: nodeValue.current,\r\n        computeNodeValueFn,\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Math\",\r\n            inputDataTypes: [...vecDataTypes],\r\n            outputDataType: \"Float\",\r\n            name: nodeName,\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    const onValueChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.value) {\r\n\r\n            const value = event.target.value.toLowerCase();\r\n\r\n            if (value === \"x\" || value === \"r\") {\r\n                selectedIndex.current = \"x\"\r\n                //  setSelectedIndex({ value: \"x\" });\r\n            }\r\n\r\n            else if (value === \"y\" || value === \"g\") {\r\n                selectedIndex.current = \"y\"\r\n                //   setSelectedIndex({ value: \"y\" });\r\n            }\r\n            else if (value === \"z\" || value === \"b\") {\r\n                selectedIndex.current = \"z\"\r\n                //        setSelectedIndex({ value: \"z\" });\r\n            }\r\n            else if (value === \"w\" || value === \"a\") {\r\n                selectedIndex.current = \"w\"\r\n                //   setSelectedIndex({ value: \"w\" });\r\n            };\r\n\r\n\r\n            let s = \"\";\r\n            const [_nodeValue, _nodeValueVar] = computeNodeValueFn(nodeStates, s);\r\n            console.log(_nodeValueVar);\r\n\r\n            nodeDispatch({\r\n                type: \"UPDATE_NODE_VALUE\",\r\n                payload: {\r\n                    ...defaultNodeState,\r\n                    id: props.id,\r\n                    props: {\r\n                        x: 0, y: 0,\r\n                        refs: null,\r\n                        nodeDataValue: { value: _nodeValueVar }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Node {...glProps}>\r\n            <NodePanel>\r\n                <TitleBar title={nodeName} />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={1} values={[\"V1(1)\", \"V2(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n                <TextInputNode onChangeFn={onValueChanged} />\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport { BoolType, GLType, defaultNodeState, FloatType, IntType, NodeDispatch } from \"reducers/nodesFilter\";\r\nimport { useAppDispatch, useAppSelector } from \"reduxStore/hooks\";\r\nimport { computeNodeValue } from \"Utils/helper\";\r\nimport { ContentContainer } from \"../ContentContainer\";\r\nimport { TextInputNode, BoolInputNode, ConnectorNode } from \"../InOutNode\";\r\nimport { Node, NodeProps } from \"../Node\";\r\nimport { NodePanel } from \"../NodePanel\";\r\nimport { TitleBar } from \"../TitleBar\";\r\n\r\nconst vectorInputTypes: GLType[] = [\"Integer\", \"Float\"]\r\n\r\nexport const Integer: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeDispatch: React.Dispatch<NodeDispatch> = useAppDispatch()\r\n    let nodeValue: IntType = 0;\r\n    const intProps: NodeProps = { ...props, value: nodeValue.toString(), nodeRefs: { id: props.id, nodeCategory: \"Data Types\", name: \"Integer\", inputDataTypes: [], outputDataType: \"Integer\", elementRef: ref, nodeOutputConnectorRef: connectorRef, nodeInputConnectorRef: null } };\r\n\r\n    const onValueChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.value) {\r\n            const value = Number(event.target.value);\r\n            if (value) {\r\n                nodeValue = value;\r\n                nodeDispatch({\r\n                    type: \"UPDATE_NODE_VALUE\",\r\n                    payload: {\r\n                        ...defaultNodeState,\r\n                        id: props.id,\r\n                        props: {\r\n                            x: 0, y: 0,\r\n                            refs: null,\r\n                            nodeDataValue: { value: value }\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Node {...intProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"Integer\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n                <TextInputNode onChangeFn={onValueChanged} />\r\n            </NodePanel>\r\n        </Node>\r\n    );\r\n};\r\n\r\nexport const Boolean: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    let nodeValue: BoolType = false;\r\n    const boolProps: NodeProps = { ...props, value: nodeValue.toString(), nodeRefs: { id: props.id, nodeCategory: \"Data Types\", name: \"Boolean\", inputDataTypes: [], outputDataType: \"Boolean\", elementRef: ref, nodeOutputConnectorRef: connectorRef, nodeInputConnectorRef: null } };\r\n\r\n    const nodeDispatch: React.Dispatch<NodeDispatch> = useAppDispatch();\r\n\r\n    const onValueChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        nodeValue = event.target.checked;\r\n        nodeDispatch({\r\n            type: \"UPDATE_NODE_VALUE\",\r\n            payload: {\r\n                ...defaultNodeState,\r\n                id: props.id,\r\n                props: {\r\n                    x: 0, y: 0,\r\n                    refs: null,\r\n                    nodeDataValue: { value: nodeValue }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Node {...boolProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"Boolean\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n                <BoolInputNode onChangeFn={onValueChanged} />\r\n            </NodePanel>\r\n        </Node>\r\n    );\r\n};\r\n\r\n\r\nexport const Float: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const connectorRef = useRef(HTMLDivElement.prototype);\r\n    const EPSILON = 0.00001;\r\n    let nodeValue: FloatType = 0.0 + EPSILON;\r\n    const floatProps: NodeProps = { ...props, value: nodeValue.toString(), nodeRefs: { id: props.id, nodeCategory: \"Data Types\", name: \"Float\", inputDataTypes: [], outputDataType: \"Float\", elementRef: ref, nodeOutputConnectorRef: connectorRef, nodeInputConnectorRef: null } };\r\n\r\n    const nodeDispatch: React.Dispatch<NodeDispatch> = useAppDispatch();\r\n    const onValueChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.value) {\r\n            const value = Number(event.target.value) + EPSILON;\r\n\r\n            if (value) {\r\n                nodeValue = value;\r\n                nodeDispatch({\r\n                    type: \"UPDATE_NODE_VALUE\",\r\n                    payload: {\r\n                        ...defaultNodeState,\r\n                        id: props.id,\r\n                        props: {\r\n                            x: 0, y: 0,\r\n                            refs: null,\r\n                            nodeDataValue: { value: value }\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <Node {...floatProps}>\r\n            <NodePanel>\r\n                <TitleBar title=\"Float\" />\r\n                <ContentContainer flex={false}>\r\n                    <ConnectorNode type=\"Output\" ref={connectorRef} count={1} values={[\"Out(1)\"]} />\r\n                </ContentContainer>\r\n                <TextInputNode onChangeFn={onValueChanged} />\r\n            </NodePanel>\r\n        </Node>\r\n    );\r\n};\r\n\r\n\r\nexport const Vector2: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n\r\n    let nodeValue = \"vec2(0, 0)\";\r\n\r\n\r\n    const vector2Props: NodeProps = {\r\n        ...props,\r\n        value: nodeValue.toString(),\r\n        computeNodeValueFn: computeNodeValue(props.id, \"vec2\", 2),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Data Types\",\r\n            name: \"Vector2\",\r\n            inputDataTypes: vectorInputTypes,\r\n            outputDataType: \"Vector2\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node  {...vector2Props} >\r\n            <NodePanel>\r\n                <TitleBar title=\"Vector2\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={2} values={[\"X(1)\", \"Y(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(2)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n\r\nexport const Vector3: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const nodeState = useAppSelector((state) => state.nodesFilter.nodeStates);\r\n    let nodeValue = \"vec3(0, 0, 0)\";\r\n\r\n\r\n    const vector3Props: NodeProps = {\r\n        ...props,\r\n        value: nodeValue.toString(),\r\n        computeNodeValueFn: computeNodeValue(props.id, \"vec3\", 3),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Data Types\",\r\n            name: \"Vector3\",\r\n            inputDataTypes: vectorInputTypes,\r\n            outputDataType: \"Vector3\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...vector3Props}>\r\n            <NodePanel>\r\n                <TitleBar title=\"Vector3\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={3} values={[\"X(1)\", \"Y(1)\", \"Z(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(3)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n\r\nexport const Vector4: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n\r\n    let nodeValue = \"vec4(0, 0, 0, 0)\";\r\n\r\n    const vector4Props: NodeProps = {\r\n        ...props,\r\n        value: nodeValue.toString(),\r\n        computeNodeValueFn: computeNodeValue(props.id, \"vec4\", 4),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Data Types\",\r\n            name: \"Vector4\",\r\n            inputDataTypes: vectorInputTypes,\r\n            outputDataType: \"Vector4\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Node {...vector4Props}>\r\n            <NodePanel>\r\n                <TitleBar title=\"Vector4\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={4} values={[\"X(1)\", \"Y(1)\", \"Z(1)\", \"W(1)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(4)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\n\r\nexport const Matrix3: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n\r\n    // const nodeState = useAppSelector((state) => state.nodesFilter.nodeStates);\r\n    let nodeValue = \"mat3(vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0))\";\r\n\r\n\r\n    const mat3Props: NodeProps = {\r\n        ...props,\r\n        value: nodeValue.toString(),\r\n        computeNodeValueFn: computeNodeValue(props.id, \"mat3\", 3),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Data Types\",\r\n            name: \"Matrix3\",\r\n            inputDataTypes: [\"Vector3\"],\r\n            outputDataType: \"Matrix3\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n    ;\r\n\r\n    return (\r\n        <Node {...mat3Props}>\r\n            <NodePanel>\r\n                <TitleBar title=\"Matrix3\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={3} values={[\"M(3)\", \"M(3)\", \"M(3)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(3X3)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n\r\nexport const Matrix4: React.FC<NodeProps> = (props) => {\r\n    const ref = useRef(HTMLDivElement.prototype);\r\n    const outputConnectorRef = useRef(HTMLDivElement.prototype);\r\n    const inputConnectorRef = useRef(HTMLDivElement.prototype);\r\n\r\n    //const nodeState = useAppSelector((state) => state.nodesFilter.nodeStates);\r\n    let nodeValue = \"mat4(vec4(0, 0, 0, 0), vec4(0, 0, 0, 0), vec4(0, 0, 0, 0), vec4(0, 0, 0, 0))\";\r\n\r\n\r\n    const mat4Props: NodeProps = {\r\n        ...props,\r\n        value: nodeValue.toString(),\r\n        computeNodeValueFn: computeNodeValue(props.id, \"mat4\", 4),\r\n        nodeRefs:\r\n        {\r\n            id: props.id,\r\n            nodeCategory: \"Data Types\",\r\n            name: \"Matrix4\",\r\n            inputDataTypes: [\"Vector4\"],\r\n            outputDataType: \"Matrix4\",\r\n            elementRef: ref,\r\n            nodeOutputConnectorRef: outputConnectorRef,\r\n            nodeInputConnectorRef: inputConnectorRef\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Node {...mat4Props}>\r\n            <NodePanel>\r\n                <TitleBar title=\"Matrix4\" />\r\n                <ContentContainer flex={true}>\r\n                    <ConnectorNode type=\"Input\" ref={inputConnectorRef} count={4} values={[\"M(4)\", \"M(4)\", \"M(4)\", \"M(4)\"]} />\r\n                    <ConnectorNode type=\"Output\" ref={outputConnectorRef} count={1} values={[\"Out(4X4)\"]} />\r\n                </ContentContainer>\r\n            </NodePanel>\r\n        </Node>\r\n    )\r\n};\r\n","\r\nexport const mathFuncs = [\r\n    \"add\",\r\n    \"multiply\",\r\n    \"divide\",\r\n    \"substract\",\r\n    \"select\",\r\n    \"abs\",\r\n    \"ceil\",\r\n    \"clamp\",\r\n    \"exp\",\r\n    \"exp2\",\r\n    \"floor\",\r\n    \"fract\",\r\n    \"fwidth\",\r\n    \"inversesqrt\",\r\n    \"isinf\",\r\n    \"isnan\",\r\n    \"log\",\r\n    \"log2\",\r\n    \"max\",\r\n    \"min\",\r\n    \"mod\",\r\n    \"noise\",\r\n    \"pow\",\r\n    \"round\",\r\n    \"roundEven\",\r\n    \"sign\",\r\n    \"smoothstep\",\r\n    \"sqrt\",\r\n    \"step\",\r\n    \"trunc\"\r\n]\r\n\r\nexport const trigonometryFuncs = [\r\n    \"acos\",\r\n    \"acosh\",\r\n    \"asin\",\r\n    \"asinh\",\r\n    \"atan\",\r\n    \"atanh\",\r\n    \"cos\",\r\n    \"cosh\",\r\n    \"degrees\",\r\n    \"radians\",\r\n    \"sin\",\r\n    \"sinh\",\r\n    \"tan\",\r\n    \"tanh\",\r\n]\r\n\r\nexport const builtinsVariables = [\r\n    \"glTexture0\",\r\n    \"glTexture1\",\r\n    \"glTexture2\",\r\n    \"glTexture3\",\r\n    \"gl_FragCoord\",\r\n    \"gl_FragColor\",\r\n    \"gl_FragDepth\",\r\n    \"iResolution\",\r\n    \"iMouseCoords\",\r\n    \"iTime\"\r\n]\r\n\r\nexport const vectorFuncs = [\r\n    \"cross\",\r\n    \"distance\",\r\n    \"dot\",\r\n    \"equal\",\r\n    \"faceforward\",\r\n    \"length\",\r\n    \"normalize\",\r\n    \"notEqual\",\r\n    \"reflect\",\r\n    \"refract\",\r\n]\r\n\r\nexport const matrixFuncs = [\r\n    \"determinant\",\r\n    \"inverse\",\r\n    \"matrixCompMult\",\r\n    \"outerProduct\",\r\n    \"transpose\",\r\n]\r\n\r\nexport const textureSampling = [\r\n    \"texture\",\r\n    \"texelFetch\",\r\n    \"textureGather\",\r\n    \"textureProj\",\r\n    \"textureSize\",\r\n]","import React, { useReducer, useRef } from \"react\";\r\nimport { defaultNodeState } from \"reducers/nodesFilter\";\r\nimport { generateUID } from \"Utils/helper\";\r\nimport { builtinsVariables, mathFuncs, matrixFuncs, textureSampling, trigonometryFuncs, vectorFuncs } from \"../../Graph/builtins\";\r\nimport { useAppDispatch } from \"../../reduxStore/hooks\";\r\n\r\ninterface ContextListItemProps {\r\n    itemName: NodeCategory;\r\n    lists: string[];\r\n    onClickFn: React.Dispatch<React.SetStateAction<number>>\r\n}\r\n\r\nconst IconDir = React.forwardRef<SVGSVGElement, {}>((props, ref) => {\r\n\r\n    return (\r\n        <svg ref={ref} className=\"IconDir\" fill=\"grey\" viewBox=\"0 0 20 20\" width=\"15\" height=\"15\">\r\n            <path d=\"M15 10c0 .3-.305.515-.305.515l-8.56 5.303c-.625.41-1.135.106-1.135-.67V4.853c0-.777.51-1.078 1.135-.67l8.56 5.305S15 9.702 15 10z\">\r\n            </path>\r\n        </svg>\r\n    );\r\n});\r\n\r\n\r\nconst ContextListItem = React.forwardRef<HTMLDivElement, ContextListItemProps>((props, ref) => {\r\n    const itemsRef = useRef(HTMLDivElement.prototype);\r\n    const iconRef = useRef(SVGSVGElement.prototype);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const toggleListItems = () => {\r\n        const elem = itemsRef.current;\r\n        const icon = iconRef.current;\r\n        icon.classList.toggle(\"Open\");\r\n        elem.classList.toggle(\"Active\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"ContexListItem\">\r\n            <div className=\"Menu\" onClick={toggleListItems}><IconDir ref={iconRef} />{props.itemName}</div>\r\n            <div ref={itemsRef} className=\"SubListContainer\">\r\n                {\r\n                    props.lists.map((el, index) => {\r\n                        return (\r\n                            <div\r\n                                key={`${index}`}\r\n                                id={el}\r\n                                className=\"SubListItem\"\r\n                                onClick={(event: React.MouseEvent) => {\r\n                                    props.onClickFn((nodeCount) => {\r\n                                        nodeCount += 1;\r\n                                        toggleListItems();\r\n                                        dispatch(\r\n                                            {\r\n                                                type: \"ADD_NODE\",\r\n                                                payload: { ...defaultNodeState, id: generateUID(), nodeName: el, props: { x: event.pageX, y: event.pageY, refs: null, nodeDataValue: { value: 0 } }, inputs: [], outputs: [] }\r\n                                            })\r\n                                        return nodeCount;\r\n                                    });\r\n\r\n                                }}>{el}\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\ninterface ContextMenuProps {\r\n    onClickFn: React.Dispatch<React.SetStateAction<number>>\r\n}\r\n\r\ntype NodeCategory = \"Builtins\" | \"Data Types\" | \"Math\" | \"Trigonometry\" | \"Vector\" | \"Matrix\" | \"Texture\";\r\n\r\nexport const ContextMenu = React.forwardRef<HTMLDivElement, ContextMenuProps>((props, ref) => {\r\n    return (\r\n        <div ref={ref} className=\"ContextMenu\">\r\n            <div className=\"ContextTitle\">Add Node</div>\r\n            <div className=\"ContextList\">\r\n                <ContextListItem key={\"Builtins\"} onClickFn={props.onClickFn} itemName=\"Builtins\" lists={builtinsVariables} />\r\n                <ContextListItem key={\"Data Types\"} onClickFn={props.onClickFn} itemName=\"Data Types\" lists={[\"Integer\", \"Float\", \"Boolean\", \"Vector2\", \"Vector3\", \"Vector4\", \"Matrix3\", \"Matrix4\"]} />\r\n                <ContextListItem key={\"Math\"} onClickFn={props.onClickFn} itemName=\"Math\" lists={mathFuncs} />\r\n                <ContextListItem key={\"Trigonometry\"} onClickFn={props.onClickFn} itemName=\"Trigonometry\" lists={trigonometryFuncs} />\r\n                <ContextListItem key={\"Vector\"} onClickFn={props.onClickFn} itemName=\"Vector\" lists={vectorFuncs} />\r\n                <ContextListItem key={\"Matrix\"} onClickFn={props.onClickFn} itemName=\"Matrix\" lists={matrixFuncs} />\r\n                <ContextListItem key={\"Texture\"} onClickFn={props.onClickFn} itemName=\"Texture\" lists={textureSampling} />\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n","import {\r\n    NodeDispatch,\r\n    ConnectorState,\r\n    ConnectorDispatch,\r\n    AppState,\r\n    defaultNodeState,\r\n    NodeInput,\r\n    UID,\r\n    GLType,\r\n    NodeState\r\n} from \"../../reducers/nodesFilter\";\r\nimport { INodeRefs } from \"Componets/GraphComponents/Node\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { generateUID, getDistanceToMouse, Vec2 } from \"Utils/helper\";\r\nimport { useAppDispatch, useAppSelector } from \"../../reduxStore/hooks\";\r\nimport { shaderGraphWindowRef } from \"../../ShaderGraphWindow\";\r\nimport { getNodeComponent } from \"../../Utils/getNodeComponent\";\r\nimport { ContextMenu } from \"../GraphComponents/ContextMenu\";\r\n\r\nexport let scale = 1;\r\nconst scaleWeight = 1.1;\r\nconst scaleLimit = 2;\r\n\r\nlet activeNodeElement: INodeRefs | null = null;\r\nlet lastActiveNodeElement: INodeRefs | null = null;\r\nlet activeNodeConnector: NodeConnectorState | null = null;\r\n\r\nlet tryingToConnectNode = false;\r\n\r\nexport let oldMousePos: Vec2 = { x: 0, y: 0 }\r\nlet mousePos: Vec2 = { x: 0, y: 0 }\r\n\r\n\r\ninterface ConnectionState {\r\n    isInside: boolean;\r\n    isValid: boolean;\r\n    outputNodeIndex: number;\r\n    inputNodeIndex?: number; // in the case of multiple input/output nodes\r\n    inputNodeId?: UID;\r\n    outputNodeId?: UID;\r\n    type: \"Input\" | \"Output\";\r\n}\r\n\r\nconst INVALID_INDEX = -1;\r\n/** for checking null values */\r\nconst DEFAULT_INDEX = 0;\r\n\r\n\r\n/** Validates connection state and updates output type of node element  receiving input `i.e vec2() + vec2() -> vec2 type`*/\r\nconst validateConnectionState = (elementRef = activeNodeElement, nodeStates: AppState, connectionState: ConnectionState, nodeDispatchFn: React.Dispatch<NodeDispatch>) => {\r\n    if (connectionState.isInside && (connectionState.type === \"Input\")) {\r\n        if (connectionState.inputNodeId === connectionState.outputNodeId) {\r\n            connectionState.isValid = false;\r\n            return;\r\n        }\r\n\r\n        if (elementRef) {\r\n            const inputType = elementRef.inputDataTypes;\r\n            const node = nodeStates.nodeStates.find((val) => val.id === elementRef.id);\r\n            \r\n            \r\n            if (inputType.find((val) => val === activeNodeElement?.outputDataType)) {\r\n                if (node?.inputs) {\r\n                    if (elementRef.name === \"texture\" || elementRef.name === \"textureProj\" || elementRef.name === \"texelFetch\" || elementRef.name === \"textureGather\" || elementRef.name === \"textureSize\") {\r\n                        if (connectionState.inputNodeIndex === 0) {\r\n                            if (activeNodeElement?.outputDataType === \"Sampler2D\") {\r\n                                connectionState.isValid = true;\r\n                                return;\r\n                            }\r\n\r\n                            connectionState.isValid = false;\r\n                            return;\r\n                        }\r\n\r\n                        if (connectionState.inputNodeIndex === 1) {\r\n                            if (activeNodeElement?.outputDataType === \"Vector2\") {\r\n                                connectionState.isValid = true;\r\n                                return;\r\n                            }\r\n\r\n                            connectionState.isValid = false;\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                \r\n                if (!node?.inputs) {\r\n                    \r\n                    connectionState.isInside = true;\r\n                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: activeNodeElement?.outputDataType as GLType } });\r\n                    return;\r\n                }\r\n            }\r\n            else connectionState.isValid = false\r\n\r\n            if (node) {\r\n                if (node.inputs) {\r\n\r\n\r\n\r\n                    if (elementRef.name === \"abs\"\r\n                        || elementRef.name === \"ceil\"\r\n                        || elementRef.name === \"floor\"\r\n                        || elementRef.name === \"fract\"\r\n                        || elementRef.name === \"inversesqrt\"\r\n                        || elementRef.name === \"log\"\r\n                        || elementRef.name === \"log2\"\r\n                        || elementRef.name === \"round\"\r\n                        || elementRef.name === \"roundEven\"\r\n                        || elementRef.name === \"sign\"\r\n                        || elementRef.name === \"sqrt\"\r\n                        || elementRef.name === \"exp\"\r\n                        || elementRef.name === \"exp2\"\r\n                        || elementRef.name === \"acos\"\r\n                        || elementRef.name === \"cos\"\r\n                        || elementRef.name === \"cosh\"\r\n                        || elementRef.name === \"acosh\"\r\n                        || elementRef.name === \"sin\"\r\n                        || elementRef.name === \"asin\"\r\n                        || elementRef.name === \"sinh\"\r\n                        || elementRef.name === \"asinh\"\r\n                        || elementRef.name === \"tan\"\r\n                        || elementRef.name === \"atan\"\r\n                        || elementRef.name === \"tanh\"\r\n                        || elementRef.name === \"atanh\"\r\n                        || elementRef.name === \"degrees\"\r\n                        || elementRef.name === \"radians\"\r\n                        || elementRef.name === \"transpose\"\r\n                        || elementRef.name === \"inverse\"\r\n                        || elementRef.name === \"determinant\"\r\n                        || elementRef.name === \"normalize\"\r\n                        || elementRef.name === \"length\"\r\n                    ) {\r\n                        if (activeNodeElement) {\r\n                            if (elementRef.name === \"transpose\" || elementRef.name === \"inverse\" || elementRef.name === \"determinant\") {\r\n                                const inputDataType = activeNodeElement.outputDataType;\r\n                                if (inputDataType === \"Matrix3\" || inputDataType === \"Matrix4\") {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n\r\n                                connectionState.isValid = false;\r\n                                return;\r\n                            }\r\n                            if (elementRef.name === \"normalize\") {\r\n                                const inputDataType = activeNodeElement.outputDataType;\r\n                                if (inputDataType === \"Vector2\" || \"Vector3\" || \"Vector4\") {\r\n                                    connectionState.isValid = true;\r\n                                    \r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n\r\n                                connectionState.isValid = false;\r\n                                return;\r\n                            }\r\n\r\n                            if (elementRef.name === \"length\") {\r\n                                \r\n                                const inputDataType = activeNodeElement.outputDataType;\r\n                                if (inputDataType === \"Vector2\" || \"Vector3\" || \"Vector4\") {\r\n                                    connectionState.isValid = true;\r\n                                    \r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Float\" } });\r\n                                    return;\r\n                                }\r\n\r\n                                connectionState.isValid = false;\r\n                                return;\r\n                            }\r\n\r\n                            const inputDataType = activeNodeElement.outputDataType;\r\n                            nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                            connectionState.isValid = true;\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n\r\n                    if (elementRef.name === \"add\" || elementRef.name === \"substract\" || elementRef.name === \"multiply\" || elementRef.name === \"divide\") {\r\n                        // if node already has a first input check if second input type would be valid `i.e 'vec2() + vec3()' would be invalid`\r\n                        if (node.inputs[0] && connectionState.inputNodeIndex === 1) {\r\n\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[0].id);\r\n                            if (elementRef.name === \"multiply\") {\r\n                                if (inputNodeElem) {\r\n                                    const inputDataType = inputNodeElem.nodeDataType;\r\n                                    if ((inputDataType === \"Matrix3\") && (activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                        connectionState.isValid = true;\r\n                                        nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Vector3\" } });\r\n                                        return;\r\n                                    }\r\n                                    if ((inputDataType === \"Matrix4\") && (activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                        connectionState.isValid = true;\r\n                                        nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Vector4\" } });\r\n                                        return;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Float\" } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Vector2\" || activeNodeElement?.outputDataType === \"Vector3\" || activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: activeNodeElement?.outputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n\r\n                            }\r\n                        }\r\n                        if (node.inputs[1] && connectionState.inputNodeIndex === 0) {\r\n\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[1].id);\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Float\" } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Vector2\" || activeNodeElement?.outputDataType === \"Vector3\" || activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: activeNodeElement?.outputDataType as GLType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (elementRef.name === \"isinf\" || elementRef.name === \"isnan\") {\r\n\r\n                        if (activeNodeElement) {\r\n                            const inputDataType = activeNodeElement.outputDataType;\r\n                            connectionState.isValid = true;\r\n                            nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Boolean\" } });\r\n                            return;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (elementRef.name === \"mod\" || elementRef.name === \"pow\" || elementRef.name === \"step\") {\r\n\r\n                        if (node.inputs[0] && connectionState.inputNodeIndex === 1) {\r\n\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[0].id);\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Float\" } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n\r\n                            }\r\n                        }\r\n                        if (node.inputs[1] && connectionState.inputNodeIndex === 0) {\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[1].id);\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Float\" } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\" || activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n                    if (elementRef.name === \"cross\" || elementRef.name === \"dot\" || elementRef.name === \"distance\" || elementRef.name === \"equal\" || elementRef.name === \"notEqual\" || elementRef.name === \"facefoward\" || elementRef.name === \"reflect\" || elementRef.name === \"refract\") {\r\n\r\n                        if (node.inputs[0] && connectionState.inputNodeIndex === 1) {\r\n\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[0].id);\r\n                            if (inputNodeElem) {\r\n                                let inputDataType = inputNodeElem.nodeDataType;\r\n                                \r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    inputDataType = elementRef.name === \"dot\" || elementRef.name === \"distance\" ? \"Float\" : inputNodeElem.nodeDataType;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    inputDataType = elementRef.name === \"dot\" || elementRef.name === \"distance\" ? \"Float\" : inputNodeElem.nodeDataType;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    inputDataType = elementRef.name === \"dot\" || elementRef.name === \"distance\" ? \"Float\" : inputNodeElem.nodeDataType;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n\r\n                            }\r\n                        }\r\n                        if (node.inputs[1] && connectionState.inputNodeIndex === 0) {\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[1].id);\r\n                            if (inputNodeElem) {\r\n                                let inputDataType = inputNodeElem.nodeDataType;\r\n                                \r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    inputDataType = elementRef.name === \"dot\" || elementRef.name === \"distance\" ? \"Float\" : inputNodeElem.nodeDataType;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    inputDataType = elementRef.name === \"dot\" || elementRef.name === \"distance\" ? \"Float\" : inputNodeElem.nodeDataType;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    inputDataType = elementRef.name === \"dot\" || elementRef.name === \"distance\" ? \"Float\" : inputNodeElem.nodeDataType;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (elementRef.name === \"matrixCompMult\" || elementRef.name === \"outerProduct\") {\r\n\r\n                        if (node.inputs[0] && connectionState.inputNodeIndex === 1) {\r\n\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[0].id);\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Matrix3\") && (activeNodeElement?.outputDataType === \"Matrix3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Matrix4\") && (activeNodeElement?.outputDataType === \"Matrix4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n\r\n                            }\r\n                        }\r\n                        if (node.inputs[1] && connectionState.inputNodeIndex === 0) {\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[1].id);\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Matrix3\") && (activeNodeElement?.outputDataType === \"Matrix3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Matrix4\") && (activeNodeElement?.outputDataType === \"Matrix4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                    if (elementRef.name === \"smoothstep\" || elementRef.name === \"clamp\") {\r\n                        if (node.inputs[0] && (connectionState.inputNodeIndex === 1 || connectionState.inputNodeIndex === 2)) {\r\n\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[0].id);\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Float\" } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n\r\n                            }\r\n                        }\r\n\r\n                        if (node.inputs[1] && (connectionState.inputNodeIndex === 0 || connectionState.inputNodeIndex === 2)) {\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[1].id);\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Float\" } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (elementRef.name === \"min\" || elementRef.name === \"max\") {\r\n                        if (node.inputs[0] && connectionState.inputNodeIndex === 1) {\r\n\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[0].id);\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Float\" } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n\r\n                            }\r\n                        }\r\n                        if (node.inputs[1] && connectionState.inputNodeIndex === 0) {\r\n                            const inputNodeElem = nodeStates.nodeStates.find((val) => val.id === node.inputs[1].id);\r\n                            if (inputNodeElem) {\r\n                                const inputDataType = inputNodeElem.nodeDataType;\r\n                                if ((inputDataType === \"Integer\" || inputDataType === \"Float\") && (activeNodeElement?.outputDataType === \"Integer\" || activeNodeElement?.outputDataType === \"Float\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: \"Float\" } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector2\") && (activeNodeElement?.outputDataType === \"Vector2\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector3\") && (activeNodeElement?.outputDataType === \"Vector3\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                if ((inputDataType === \"Vector4\") && (activeNodeElement?.outputDataType === \"Vector4\")) {\r\n                                    connectionState.isValid = true;\r\n                                    nodeDispatchFn({ type: \"UPDATE_OUTPUT_TYPE\", payload: { ...defaultNodeState, id: elementRef.id, nodeDataType: inputDataType } });\r\n                                    return;\r\n                                }\r\n                                connectionState.isValid = false;\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if mouse is trying to connect a Node\r\n * @returns ConnectionState Object\r\n */\r\nconst testForConnection = (event: React.MouseEvent, elementRef = activeNodeElement): ConnectionState => {\r\n    let outputNode = elementRef?.nodeOutputConnectorRef.current as HTMLElement;\r\n    let inputNodeRef = elementRef?.nodeInputConnectorRef\r\n\r\n\r\n    for (let i = 0; i < outputNode.childElementCount; i++) {\r\n\r\n        let node = outputNode.children[i].children[1]; // circle Node\r\n        let outputedNodebb = outputNode.children[i].children[2].getBoundingClientRect();\r\n\r\n        let bb = node.getBoundingClientRect();\r\n        bb = new DOMRect(bb.x, bb.y, outputedNodebb.right - bb.left, bb.height);\r\n        let distance = getDistanceToMouse({ x: event.pageX, y: event.pageY }, bb);\r\n        if (distance === 0) {\r\n            return { isInside: true, outputNodeIndex: i, isValid: true, outputNodeId: elementRef?.id as UID, type: \"Output\" };\r\n        }\r\n    }\r\n\r\n    if (inputNodeRef) {\r\n        let inputNode = inputNodeRef.current;\r\n        for (let i = 0; i < inputNode.childElementCount; i++) {\r\n\r\n            let node = inputNode.children[i].children[0];\r\n            let outputedNodebb = inputNode.children[i].children[1].getBoundingClientRect();\r\n\r\n            let bb = node.getBoundingClientRect();\r\n\r\n            bb = new DOMRect(bb.x, outputedNodebb.y, outputedNodebb.right - bb.left, outputedNodebb.height);\r\n            let distance = getDistanceToMouse({ x: event.pageX, y: event.pageY }, bb);\r\n\r\n            if (distance === 0) {\r\n                return { isInside: true, inputNodeIndex: i, isValid: true, inputNodeId: elementRef?.id as UID, outputNodeId: \"\", outputNodeIndex: 0, type: \"Input\" };\r\n            }\r\n        }\r\n    }\r\n\r\n    return { isInside: false, isValid: false, outputNodeIndex: INVALID_INDEX, inputNodeIndex: INVALID_INDEX, type: \"Input\" };\r\n}\r\n\r\nconst handleMouseDraggingConnector = (event: React.MouseEvent, dispatchFn: React.Dispatch<ConnectorDispatch>) => {\r\n    const connectionResult = testForConnection(event);\r\n    if (connectionResult.isInside && (connectionResult.type === \"Output\")) {\r\n        dispatchFn({ type: \"FINDING\", payload: { type: \"Output\", inputIndex: INVALID_INDEX, outputIndex: connectionResult.outputNodeIndex, dragging: true, connected: false, elementRef: activeNodeElement?.nodeOutputConnectorRef } })\r\n    }\r\n}\r\n\r\nconst handleNodeSelection = (elementRefs: INodeRefs, connectorDispatch: React.Dispatch<ConnectorDispatch>) => {\r\n\r\n    return (event: React.MouseEvent) => {\r\n        switch (event.type) {\r\n            case \"mousedown\":\r\n                {\r\n                    if (activeNodeElement) {\r\n                        const elem = activeNodeElement.elementRef.current as HTMLDivElement;\r\n                        elem.style.border = \"none\";\r\n                    }\r\n                    activeNodeElement = elementRefs;\r\n                    // check if trying to start a connection\r\n                    handleMouseDraggingConnector(event, connectorDispatch);\r\n\r\n                    const elem = activeNodeElement.elementRef.current as HTMLDivElement;\r\n                    elem.style.border = \"solid\";\r\n\r\n                    oldMousePos = { x: event.pageX, y: event.pageY };\r\n                    mousePos = oldMousePos;\r\n                    break;\r\n                }\r\n            case \"mouseup\":\r\n                {\r\n                    break;\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\nconst handleNodeConnection = (elementRefs: INodeRefs, nodeDispatchFn: React.Dispatch<NodeDispatch>, connectorDispatch: React.Dispatch<ConnectorDispatch>, nodeStates: AppState, connectorState: ConnectorState) => {\r\n    return (event: React.MouseEvent) => {\r\n        switch (event.type) {\r\n            case \"mousemove\": {\r\n                if (connectorState.dragging) {\r\n\r\n                    // check if mouse if trying to connect a node\r\n                    const connectionResult = testForConnection(event, elementRefs);\r\n\r\n                    // validateConnectionState(elementRefs, nodeStates, connectionResult, nodeDispatchFn);\r\n                    if (connectionResult.isInside) {\r\n                        if (connectionResult.type === \"Input\") {\r\n                            connectorDispatch({ type: \"CONNECTED\", payload: { type: \"Input\", outputIndex: connectorState.outputIndex, inputIndex: connectionResult.inputNodeIndex as number, dragging: true, connected: true, elementRef: activeNodeElement?.elementRef } })\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"mouseup\": {\r\n                if (connectorState.connected) {\r\n                    // handles when mouse was released on trying to connect to a node\r\n\r\n                    const activeNode = activeNodeElement as INodeRefs;\r\n                    const connectionResult = testForConnection(event, elementRefs);\r\n                    validateConnectionState(elementRefs, nodeStates, connectionResult, nodeDispatchFn);\r\n                    if (connectionResult.isInside && connectionResult.isValid) {\r\n                        nodeDispatchFn(\r\n                            {\r\n                                type: \"UPDATE_NODE\",\r\n                                payload: {\r\n                                    ...defaultNodeState,\r\n                                    id: elementRefs.id,\r\n                                    props:\r\n                                    {\r\n                                        x: 0, y: 0,\r\n                                        refs: elementRefs,\r\n                                        nodeDataValue: { value: 0 }\r\n                                    },\r\n                                    inputs: [{\r\n                                        id: activeNodeElement?.id as UID,\r\n                                        index: connectorState.inputIndex,\r\n                                        inputData: { value: 0 },\r\n                                        nodeConnectorRef: defaultNodeState.inputs[0].nodeConnectorRef,\r\n                                        ref: activeNodeElement as INodeRefs\r\n                                    }]\r\n                                }\r\n                            });\r\n\r\n                        nodeDispatchFn(\r\n                            {\r\n                                type: \"UPDATE_NODE\",\r\n                                payload: {\r\n                                    ...defaultNodeState,\r\n                                    id: activeNode.id,\r\n                                    props:\r\n                                    {\r\n                                        x: 0, y: 0,\r\n                                        refs: activeNode,\r\n                                        nodeDataValue: { value: 0 }\r\n                                    },\r\n                                    outputs: [{\r\n                                        id: elementRefs.id as UID,\r\n                                        index: connectorState.inputIndex,\r\n                                        outputData: { value: 0 },\r\n                                        ref: elementRefs as INodeRefs\r\n                                    }]\r\n                                }\r\n                            });\r\n                    }\r\n                    connectorDispatch({ type: \"RELEASE\", payload: { type: \"NULL\", inputIndex: INVALID_INDEX, outputIndex: INVALID_INDEX, dragging: false, connected: false } })\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst updateNodePosition = (nodeElem: NodeState, nodeState: NodeState[]) => {\r\n    if (nodeElem !== undefined) {\r\n        // handle Node movement/connection if seleted node has outputs\r\n        if (nodeElem.inputs.length > 0) {\r\n\r\n            for (let i = 0; i < nodeElem.inputs.length; i++) {\r\n                const inputNode = nodeElem.inputs[i];\r\n                if (inputNode) {\r\n\r\n                    const nodeConnector = inputNode.nodeConnectorRef.current;\r\n                    let pathStart: Vec2 = { x: 0, y: 0 };\r\n                    let pathEnd: Vec2 = { x: 0, y: 0 };\r\n\r\n                    if (nodeElem.props.refs) {\r\n                        if (nodeElem.props.refs.nodeInputConnectorRef) {\r\n                            const connector = nodeElem.props.refs.nodeInputConnectorRef.current.children[inputNode.index];\r\n                            const rect = connector?.children[0].getBoundingClientRect() as DOMRect;\r\n                            pathEnd = { x: rect.left, y: (rect.y + 2) }\r\n                        }\r\n                        // assuming its only has one output node;\r\n                        const outputer = inputNode.ref?.nodeOutputConnectorRef.current.children[0];\r\n                        if (outputer) {\r\n                            const rect = outputer.children[2].getBoundingClientRect();\r\n                            pathStart = { x: rect.right - 5, y: (rect.y + 2) };\r\n                            nodeConnector?.setAttribute(\"d\", `M${pathStart.x} ${pathStart.y} C${pathStart.x + 60} ${pathStart.y}, ${pathEnd.x - 60} ${pathEnd.y + 2}, ${pathEnd.x} ${pathEnd.y}`);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // handle Node movement/connection if seleted node has outputs\r\n        if (nodeElem.outputs.length > 0) {\r\n\r\n            for (let outputNode of nodeElem.outputs) {\r\n\r\n                let index = 0;\r\n                if (outputNode) {\r\n                    // find ouputed element\r\n                    let outputedNodeElem: NodeInput = defaultNodeState.inputs[0];\r\n                    let outputedNode = nodeState.find((elem) => {\r\n                        if (elem.id === outputNode.id) {\r\n                            for (let i = 0; i < elem.inputs.length; i++) {\r\n                                if (elem.inputs[i])\r\n                                    if (elem.inputs[i].index === outputNode.index) {\r\n                                        outputedNodeElem = elem.inputs[i];\r\n                                        return true;\r\n                                    }\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    });\r\n\r\n                    if (!outputedNode) {\r\n                        continue;\r\n                    }\r\n\r\n                    const nodeConnector = outputedNodeElem.nodeConnectorRef.current as SVGPathElement;\r\n                    index++;\r\n                    let pathStart: Vec2 = { x: 0, y: 0 };\r\n                    let pathEnd: Vec2 = { x: 0, y: 0 };\r\n\r\n                    if (nodeElem.props.refs) {\r\n                        if (nodeElem.props.refs.nodeOutputConnectorRef) {\r\n                            const connector = nodeElem.props.refs.nodeOutputConnectorRef.current.children[0];\r\n                            const rect = connector?.children[2].getBoundingClientRect() as DOMRect;\r\n                            pathStart = { x: rect.right - 5, y: (rect.y + 2) }\r\n                        }\r\n                        // assuming its only has one output node;\r\n                        const inputer = outputNode.ref?.nodeInputConnectorRef?.current.children[outputNode.index] as HTMLElement;\r\n                        const rect = inputer.children[0].getBoundingClientRect();\r\n                        pathEnd = { x: rect.left, y: (rect.y + 2) };\r\n\r\n                        nodeConnector?.setAttribute(\"d\", `M${pathStart.x} ${pathStart.y} C${pathStart.x + 60} ${pathStart.y}, ${pathEnd.x - 60} ${pathEnd.y + 2}, ${pathEnd.x} ${pathEnd.y}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst handleNodeMovement = (event: React.MouseEvent, dispatchFn: Function, nodeState: AppState, connectorState: ConnectorState) => {\r\n\r\n    mousePos = { x: event.pageX, y: event.pageY };\r\n\r\n    if (connectorState.dragging) {\r\n\r\n        let pathNode = defaultNodeConnectorRef.current as SVGPathElement;\r\n        if (pathNode) {\r\n            let connector = activeNodeElement?.nodeOutputConnectorRef.current.children[connectorState.outputIndex];\r\n            let rect = connector?.children[2].getBoundingClientRect() as DOMRect;\r\n\r\n            pathNode.setAttribute(\"d\", `M${(rect.right)} ${(rect.y + 2)} C${(rect.right) + 60} ${(rect.y - 2)}, ${event.pageX - 60} ${event.pageY}, ${event.pageX} ${event.pageY}`);\r\n        }\r\n        return;\r\n    }\r\n    else {\r\n        let pathNode = defaultNodeConnectorRef.current as SVGPathElement;\r\n        if (pathNode) {\r\n            pathNode.setAttribute(\"d\", `M0 0 C 0 0, 0 0, 0 0`);\r\n        }\r\n    }\r\n\r\n    if (!activeNodeElement)\r\n        return;\r\n\r\n    // set cursor to grabbing on root node\r\n    let rootRef = shaderGraphWindowRef.current as HTMLDivElement;\r\n    rootRef.style.cursor = \"grabbing\";\r\n\r\n    const elem = activeNodeElement.elementRef.current as HTMLDivElement;\r\n    elem.style.left = elem.offsetLeft + ((event.pageX - oldMousePos.x) / scale) + \"px\";\r\n    elem.style.top = elem.offsetTop + ((event.pageY - oldMousePos.y) / scale) + \"px\";\r\n\r\n    const nodeElem = nodeState.nodeStates.find((element) => element.id === activeNodeElement?.id) as NodeState;\r\n    updateNodePosition(nodeElem, nodeState.nodeStates);\r\n\r\n    oldMousePos = { x: event.pageX, y: event.pageY };\r\n}\r\n\r\nconst handleNodeDeselection = (event: React.MouseEvent) => {\r\n\r\n    if (event.target != activeNodeConnector?.ref.current) {\r\n        if (activeNodeConnector) {\r\n            if (activeNodeConnector.ref.current) {\r\n                activeNodeConnector.ref.current.classList.remove(\"Active\");\r\n                activeNodeConnector = null;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    hideContext(event);\r\n    if (lastActiveNodeElement?.elementRef !== activeNodeElement?.elementRef) {\r\n        if (!lastActiveNodeElement)\r\n            return;\r\n\r\n        let elem = lastActiveNodeElement.elementRef.current as HTMLDivElement\r\n        elem.style.border = \"none\"\r\n    }\r\n    if (event.target === graphPanelRef.current) {\r\n        if (!lastActiveNodeElement)\r\n            return;\r\n        let elem = lastActiveNodeElement.elementRef.current as HTMLDivElement\r\n        elem.style.border = \"none\";\r\n    }\r\n}\r\n\r\nconst handleZooming = (nodeStates: NodeState[]) => {\r\n    return (event: React.WheelEvent) => {\r\n        if ((event.target === graphPanelRef.current?.children[0]) || (event.target === graphPanelRef.current?.children[1]) || (event.target === graphPanelRef.current)) {\r\n            let elem = graphPanelRef.current as HTMLDivElement;\r\n            let container = elem.children[1] as HTMLDivElement;\r\n\r\n            if (event.deltaY < 0) {\r\n                scale *= scaleWeight;\r\n                if (scale >= scaleLimit) {\r\n                    scale = scaleLimit;\r\n                }\r\n                container.style.transform = `scale(${scale})`;\r\n                const connectorContainer = graphPanelRef.current.children[0];\r\n                connectorContainer.setAttribute(\"stroke-width\", `calc(4px * ${scale})`);\r\n            }\r\n            else {\r\n                scale /= scaleWeight;\r\n\r\n                if (scale <= 0.1) {\r\n                    scale = 0.1;\r\n                }\r\n\r\n                const connectorContainer = graphPanelRef.current.children[0];\r\n                connectorContainer.setAttribute(\"stroke-width\", `calc(4px * ${scale})`);\r\n                container.style.transform = `scale(${scale})`;\r\n            }\r\n\r\n\r\n            for (let nodeElem of nodeStates) {\r\n                updateNodePosition(nodeElem, nodeStates);\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\nconst contextMenuRef = React.createRef<HTMLDivElement>();\r\nlet contextVisible = false;\r\n\r\nexport const hideContext = (event: React.MouseEvent) => {\r\n    if (event.button !== 0)\r\n        return;\r\n    const contextElem = contextMenuRef.current as HTMLDivElement;\r\n    if (contextVisible)\r\n        contextVisible = false;\r\n\r\n\r\n\r\n    if (event.target === contextMenuRef.current) {\r\n        contextVisible = true\r\n        return;\r\n    }\r\n    contextElem.classList.remove(\"Active\");\r\n}\r\n\r\nexport const showContext = (pos = mousePos) => {\r\n    const contextElem = contextMenuRef.current as HTMLDivElement;\r\n    contextVisible = !contextVisible;\r\n\r\n    contextElem.style.left = (pos.x) + \"px\";\r\n    contextElem.style.top = (pos.y) + \"px\";\r\n    contextElem.classList.toggle(\"Active\");\r\n\r\n}\r\n\r\nconst handleKeyEvents = (nodeDispatchFn: React.Dispatch<NodeDispatch>, setNodeCount: React.Dispatch<React.SetStateAction<number>>) => {\r\n    return (event: KeyboardEvent) => {\r\n        if (event.ctrlKey) {\r\n            if (event.code === \"KeyA\") {\r\n                showContext();\r\n            }\r\n\r\n            if (event.shiftKey && event.code === \"KeyD\") {\r\n                event.preventDefault();\r\n                nodeDispatchFn(\r\n                    {\r\n                        type: \"ADD_NODE\",\r\n                        payload: {\r\n                            ...defaultNodeState, id: generateUID(),\r\n                            nodeName: lastActiveNodeElement?.name as string, props: {\r\n                                x: mousePos.x, y: mousePos.y,\r\n                                refs: null, nodeDataValue: { value: 0 },\r\n\r\n                            },\r\n                            inputs: []\r\n                        },\r\n                    });\r\n\r\n                setNodeCount((val) => val += 1);\r\n\r\n            }\r\n        }\r\n\r\n        // handle deleting node\r\n        if (event.code == \"Delete\") {\r\n            if (activeNodeConnector != null) {\r\n                nodeDispatchFn(\r\n                    {\r\n                        type: \"REMOVE_NODE_INPUT\",\r\n                        payload: {\r\n                            ...defaultNodeState,\r\n                            id: activeNodeConnector.nodeProps?.id as UID,\r\n                            inputs: [{\r\n                                id: \"\",\r\n                                index: activeNodeConnector.index,\r\n                                inputData: { value: 0 },\r\n                                nodeConnectorRef: defaultNodeState.inputs[0].nodeConnectorRef,\r\n                                ref: activeNodeElement as INodeRefs\r\n                            }]\r\n                        }\r\n                    });\r\n\r\n                activeNodeConnector = null\r\n                setNodeCount((value) => value -= 1);\r\n                setNodeCount((value) => value += 1);\r\n\r\n\r\n            }\r\n            if (lastActiveNodeElement != null) {\r\n                nodeDispatchFn(\r\n                    {\r\n                        type: \"REMOVE_NODE\",\r\n                        payload: {\r\n                            ...defaultNodeState,\r\n                            id: lastActiveNodeElement.id,\r\n                        }\r\n                    });\r\n                activeNodeElement = null;\r\n                lastActiveNodeElement = null;\r\n                setNodeCount((value) => value -= 1)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface NodeConnectorProps {\r\n    start: Vec2;\r\n    end: Vec2;\r\n    curveAmount: number,\r\n    index: number;\r\n    nodeProps: INodeRefs | null,\r\n}\r\n\r\ninterface NodeConnectorState {\r\n    index: number;\r\n    ref: React.RefObject<SVGPathElement>;\r\n    nodeProps: INodeRefs | null;\r\n}\r\n\r\nconst NodeConnector = React.forwardRef<SVGPathElement, NodeConnectorProps>((props, ref) => {\r\n\r\n    const nodeState = useAppSelector((state) => state.nodesFilter);\r\n    const _ref = useRef<SVGPathElement>(SVGPathElement.prototype)\r\n\r\n    useEffect(() => {\r\n\r\n        nodeState.nodeStates.forEach((el) => {\r\n            if (el.id === props.nodeProps?.id) {\r\n                for (let input of el.inputs) {\r\n                    if (input) {\r\n                        if (input.index === props.index) {\r\n                            input.nodeConnectorRef = _ref;\r\n\r\n                        };\r\n                    };\r\n                };\r\n            };\r\n        });\r\n    });\r\n\r\n    return (\r\n        <path className={\"NodeConnector\"} onMouseDown={() => {\r\n\r\n            let state: NodeConnectorState = { index: props.index, ref: _ref, nodeProps: props.nodeProps };\r\n            activeNodeConnector = state;\r\n            const elem = _ref.current;\r\n            if (elem)\r\n                elem.classList.add(\"Active\");\r\n\r\n        }} ref={ref ? ref : _ref} d=\r\n            {`M${props.start.x} ${props.start.y} \r\n              C${props.start.x + 60} ${props.start.y}, \r\n               ${props.end.x - 60} ${props.end.y}, \r\n               ${props.end.x} ${props.end.y}`}\r\n        />\r\n    );\r\n});\r\n\r\nconst defaultNodeConnectorRef = React.createRef<SVGPathElement>();\r\n//let connectorRefs: React.RefObject<SVGPathElement>[] = []\r\n\r\nconst ConnectorContainer = () => {\r\n    const nodeState = useAppSelector((state) => state.nodesFilter);\r\n    let count = 0;\r\n\r\n\r\n    return (\r\n        <svg className={\"ConnectorContainer\"} width=\"100vw\" height=\"100vh\" fill=\"transparent\" stroke=\"grey\" strokeWidth={\"4px\"} >\r\n            <NodeConnector start={{ x: 0, y: 0 }} index={0} end={{ x: 0, y: 0 }} nodeProps={null} curveAmount={1} ref={defaultNodeConnectorRef} />\r\n            {\r\n                nodeState.nodeStates.flatMap((value, index) => {\r\n\r\n                    let result = []\r\n                    if (value.inputs.length > 0) {\r\n                        for (let inputNode of value.inputs) {\r\n\r\n                            if (inputNode) {\r\n                                let pathStart: Vec2 = { x: 0, y: 0 };\r\n                                let pathEnd: Vec2 = { x: 0, y: 0 };\r\n\r\n                                if (value.props.refs) {\r\n                                    if (value.props.refs.nodeInputConnectorRef) {\r\n                                        const connector = value.props.refs.nodeInputConnectorRef.current.children[inputNode.index];\r\n                                        const rect = connector?.children[0].getBoundingClientRect() as DOMRect;\r\n                                        pathEnd = { x: rect.left, y: (rect.y + 2) }\r\n                                    }\r\n                                    // assuming its only has one output node;\r\n                                    const outputer = inputNode.ref?.nodeOutputConnectorRef.current.children[0];\r\n                                    if (outputer) {\r\n                                        const rect = outputer.children[2].getBoundingClientRect();\r\n                                        pathStart = { x: rect.right - 5, y: (rect.y) };\r\n\r\n                                    }\r\n                                }\r\n\r\n\r\n                                //      inputNode.nodeConnectorRef = connectorRefs[index];\r\n                                result.push(<NodeConnector key={index + count} index={value.inputs.findIndex((val) => { if (val) return (val.id == inputNode.id && val.index == inputNode.index) })} nodeProps={value.props.refs} start={pathStart} end={pathEnd} curveAmount={1} />)\r\n                                count++;\r\n                            };\r\n\r\n                        };\r\n                    };\r\n\r\n                    return result;\r\n                })\r\n            }\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport const GraphTab = () => {\r\n    const nodeState = useAppSelector((state) => state.nodesFilter);\r\n    const connectorState = useAppSelector((state) => state.connectorFilter);\r\n    const [nodeCount, setNodeCount] = useState(0);\r\n\r\n    const nodesDispatch: React.Dispatch<NodeDispatch> = useAppDispatch();\r\n    const connectorDispatch: React.Dispatch<ConnectorDispatch> = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", handleKeyEvents(nodesDispatch, setNodeCount));\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (contextVisible) {\r\n            contextVisible = false;\r\n            const contextElem = contextMenuRef.current as HTMLDivElement;\r\n            contextElem.classList.remove(\"Active\");\r\n        };\r\n    });\r\n    return (\r\n        <div ref={graphTabRef} className=\"GraphTab\">\r\n            <ContextMenu onClickFn={setNodeCount} ref={contextMenuRef} />\r\n            <div ref={graphPanelRef} className=\"GraphPanel\"\r\n                onWheel={handleZooming(nodeState.nodeStates)}\r\n                onMouseMove={(event) => { handleNodeMovement(event, nodesDispatch, nodeState, connectorState) }}\r\n                onMouseUp={() => {\r\n                    tryingToConnectNode = false;\r\n                    lastActiveNodeElement = activeNodeElement;\r\n                    activeNodeElement = null;\r\n                    if (connectorState.dragging)\r\n                        connectorDispatch({ type: \"RELEASE\", payload: { type: \"NULL\", outputIndex: INVALID_INDEX, inputIndex: INVALID_INDEX, dragging: false, connected: false } });\r\n                }}\r\n\r\n                onContextMenu={(event) => {\r\n                    switch (event.button) {\r\n                        case 2: // right mouse button \r\n                            {\r\n                                event.preventDefault();\r\n                                showContext();\r\n                            };\r\n                    };\r\n                }}\r\n\r\n                onMouseDown={handleNodeDeselection}\r\n            >\r\n\r\n                <ConnectorContainer />\r\n                <div className=\"PanelContainer\">\r\n                    {\r\n                        nodeState.nodeStates.map((value, index) => getNodeComponent(value, handleNodeSelection, handleNodeConnection))\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        </div >);\r\n\r\n};\r\n\r\nexport const graphTabRef = React.createRef<HTMLDivElement>();\r\nconst graphPanelRef = React.createRef<HTMLDivElement>();\r\n\r\n","import { NodeState } from \"reducers/nodesFilter\";\r\nimport { GlFragCoord, GlFragDepth, GlResolution, GlTime, GlMouseCoords, GlFragColor, GLTexture0, GLTexture1, GLTexture2, GLTexture3 } from \"../Componets/GraphComponents/Builtins/Builtins\";\r\nimport * as GLComp from \"../Componets/GraphComponents/GLFuncs/GLFuncs\"\r\nimport * as GlType from \"../Componets/GraphComponents/DataTypes/DataTypes\"\r\n\r\n\r\nimport { ConnectorFn, NodeClickFn, NodeProps } from \"Componets/GraphComponents/Node\";\r\n\r\nexport const getNodeComponent = (nodeState: NodeState, clickFn: NodeClickFn, connectorFn: ConnectorFn) => {\r\n    const props: NodeProps = { id: nodeState.id, x: nodeState.props.x, y: nodeState.props.y, value: \"\", nodeRefs: null, clickFn, connectorFn, computeNodeValueFn: (n) => [\"\"] }\r\n\r\n    switch (nodeState.nodeName) {\r\n        case \"glTexture0\": {\r\n            return <GLTexture0 key={nodeState.id} {...props} />\r\n        }\r\n        case \"glTexture1\": {\r\n            return <GLTexture1 key={nodeState.id} {...props} />\r\n        }\r\n        case \"glTexture2\": {\r\n            return <GLTexture2 key={nodeState.id} {...props} />\r\n        }\r\n        case \"glTexture3\": {\r\n            return <GLTexture3 key={nodeState.id} {...props} />\r\n        }\r\n        case \"gl_FragColor\": {\r\n            return <GlFragColor key={nodeState.id} {...props} />\r\n        }\r\n        case \"gl_FragCoord\": {\r\n            return <GlFragCoord key={nodeState.id} {...props} />\r\n        }\r\n        case \"gl_FragDepth\": {\r\n            return <GlFragDepth key={nodeState.id} {...props} />\r\n        }\r\n        case \"iResolution\": {\r\n            return <GlResolution key={nodeState.id} {...props} />\r\n        }\r\n        case \"iTime\": {\r\n            return <GlTime key={nodeState.id} {...props} />\r\n        }\r\n        case \"iMouseCoords\": {\r\n            return <GlMouseCoords key={nodeState.id} {...props} />\r\n        }\r\n        case \"texture\": {\r\n            return <GLComp.GlTexture key={nodeState.id} {...props} />\r\n        }\r\n        case \"textureProj\": {\r\n            return <GLComp.GlTextureProj key={nodeState.id} {...props} />\r\n        }\r\n        case \"texelFetch\": {\r\n            return <GLComp.GlTexelFetch key={nodeState.id} {...props} />\r\n        }\r\n        case \"textureGather\": {\r\n            return <GLComp.GlTextureGather key={nodeState.id} {...props} />\r\n        }\r\n        case \"textureSize\": {\r\n            return <GLComp.GlTextureSize key={nodeState.id} {...props} />\r\n        }\r\n        case \"add\": {\r\n            return <GLComp.GlAdd key={nodeState.id} {...props} />\r\n        }\r\n        case \"multiply\": {\r\n            return <GLComp.GlMultiply key={nodeState.id} {...props} />\r\n        }\r\n        case \"divide\": {\r\n            return < GLComp.GlDivide key={nodeState.id} {...props} />\r\n        }\r\n        case \"substract\": {\r\n            return < GLComp.GlSubstract key={nodeState.id} {...props} />\r\n        }\r\n        case \"abs\": {\r\n            return < GLComp.GlAbs key={nodeState.id} {...props} />\r\n        }\r\n        case \"ceil\": {\r\n            return < GLComp.GlCeil key={nodeState.id} {...props} />\r\n        }\r\n        case \"clamp\": {\r\n            return < GLComp.GlClamp key={nodeState.id} {...props} />\r\n        }\r\n        case \"exp\": {\r\n            return < GLComp.GlExp key={nodeState.id} {...props} />\r\n        }\r\n        case \"exp2\": {\r\n            return < GLComp.GlExp2 key={nodeState.id} {...props} />\r\n        }\r\n        case \"floor\": {\r\n            return < GLComp.GlFloor key={nodeState.id} {...props} />\r\n        }\r\n        case \"fract\": {\r\n            return < GLComp.GlFract key={nodeState.id} {...props} />\r\n        }\r\n\r\n        case \"inversesqrt\": {\r\n            return < GLComp.GlInvSqrt key={nodeState.id} {...props} />\r\n        }\r\n        case \"isinf\": {\r\n            return < GLComp.GlInf key={nodeState.id} {...props} />\r\n        }\r\n        case \"isnan\": {\r\n            return < GLComp.GlNan key={nodeState.id} {...props} />\r\n        }\r\n        case \"log\": {\r\n            return < GLComp.GlLog key={nodeState.id} {...props} />\r\n        }\r\n        case \"log2\": {\r\n            return < GLComp.GlLog2 key={nodeState.id} {...props} />\r\n        }\r\n        case \"max\": {\r\n            return < GLComp.GlMax key={nodeState.id} {...props} />\r\n        }\r\n        case \"min\": {\r\n            return < GLComp.GlMin key={nodeState.id} {...props} />\r\n        }\r\n        case \"mod\": {\r\n            return < GLComp.GlMod key={nodeState.id} {...props} />\r\n        }\r\n        case \"noise\": {\r\n            return < GLComp.GlNoise key={nodeState.id} {...props} />\r\n        }\r\n        case \"pow\": {\r\n            return < GLComp.GlPow key={nodeState.id} {...props} />\r\n        }\r\n        case \"round\": {\r\n            return < GLComp.GlRound key={nodeState.id} {...props} />\r\n        }\r\n        case \"roundEven\": {\r\n            return < GLComp.GlRoundEven key={nodeState.id} {...props} />\r\n        }\r\n        case \"sign\": {\r\n            return < GLComp.GlSign key={nodeState.id} {...props} />\r\n        }\r\n        case \"smoothstep\": {\r\n            return < GLComp.GlSmoothstep key={nodeState.id} {...props} />\r\n        }\r\n        case \"sqrt\": {\r\n            return < GLComp.GlSqrt key={nodeState.id} {...props} />\r\n        }\r\n        case \"step\": {\r\n            return < GLComp.GlStep key={nodeState.id} {...props} />\r\n        }\r\n        case \"trunc\": {\r\n            return < GLComp.GlTrunc key={nodeState.id} {...props} />\r\n        }\r\n        case \"acos\": {\r\n            return < GLComp.GlAcos key={nodeState.id} {...props} />\r\n        }\r\n        case \"acosh\": {\r\n            return < GLComp.GlAcosH key={nodeState.id} {...props} />\r\n        }\r\n        case \"asin\": {\r\n            return < GLComp.GlASin key={nodeState.id} {...props} />\r\n        }\r\n        case \"asinh\": {\r\n            return < GLComp.GlASinH key={nodeState.id} {...props} />\r\n        }\r\n        case \"atan\": {\r\n            return < GLComp.GlAtan key={nodeState.id} {...props} />\r\n        }\r\n        case \"atanh\": {\r\n            return < GLComp.GlAtanH key={nodeState.id} {...props} />\r\n        }\r\n        case \"cos\": {\r\n            return < GLComp.GlCos key={nodeState.id} {...props} />\r\n        }\r\n        case \"cosh\": {\r\n            return < GLComp.GlCosH key={nodeState.id} {...props} />\r\n        }\r\n        case \"degrees\": {\r\n            return < GLComp.GlDegrees key={nodeState.id} {...props} />\r\n        }\r\n        case \"radians\": {\r\n            return < GLComp.GlRadians key={nodeState.id} {...props} />\r\n        }\r\n        case \"sin\": {\r\n            return < GLComp.GlSin key={nodeState.id} {...props} />\r\n        }\r\n        case \"sinh\": {\r\n            return < GLComp.GlSinH key={nodeState.id} {...props} />\r\n        }\r\n        case \"tan\": {\r\n            return < GLComp.GlTan key={nodeState.id} {...props} />\r\n        }\r\n        case \"tanh\": {\r\n            return < GLComp.GlTanH key={nodeState.id} {...props} />\r\n        }\r\n        case \"cross\": {\r\n            return < GLComp.GlCross key={nodeState.id} {...props} />\r\n        }\r\n        case \"distance\": {\r\n            return < GLComp.GlDistance key={nodeState.id} {...props} />\r\n        }\r\n        case \"dot\": {\r\n            return < GLComp.GlDot key={nodeState.id} {...props} />\r\n        }\r\n        case \"equal\": {\r\n            return < GLComp.GlEqual key={nodeState.id} {...props} />\r\n        }\r\n        case \"faceforward\": {\r\n            return < GLComp.GlFaceForward key={nodeState.id} {...props} />\r\n        }\r\n        case \"length\": {\r\n            return < GLComp.GlLength key={nodeState.id} {...props} />\r\n        }\r\n        case \"normalize\": {\r\n            return < GLComp.GlNormalize key={nodeState.id} {...props} />\r\n        }\r\n        case \"notEqual\": {\r\n            return < GLComp.GlNotEqual key={nodeState.id} {...props} />\r\n        }\r\n        case \"reflect\": {\r\n            return < GLComp.GlReflect key={nodeState.id} {...props} />\r\n        }\r\n        case \"refract\": {\r\n            return < GLComp.GlRefract key={nodeState.id} {...props} />\r\n        }\r\n        case \"determinant\": {\r\n            return < GLComp.GlDeterminant key={nodeState.id} {...props} />\r\n        }\r\n        case \"inverse\": {\r\n            return < GLComp.GlInverse key={nodeState.id} {...props} />\r\n        }\r\n        case \"matrixCompMult\": {\r\n            return < GLComp.GlMatCompMult key={nodeState.id} {...props} />\r\n        }\r\n        case \"outerProduct\": {\r\n            return < GLComp.GlOuterProduct key={nodeState.id} {...props} />\r\n        }\r\n        case \"transpose\": {\r\n            return < GLComp.GlTranspose key={nodeState.id} {...props} />\r\n        }\r\n        case \"Integer\": {\r\n            return <GlType.Integer key={nodeState.id} {...props} />\r\n        }\r\n        case \"Boolean\": {\r\n            return <GlType.Boolean key={nodeState.id} {...props} />\r\n        }\r\n        case \"Float\": {\r\n            return <GlType.Float key={nodeState.id} {...props} />\r\n        }\r\n        case \"Vector2\": {\r\n            return <GlType.Vector2 key={nodeState.id} {...props} />\r\n        }\r\n        case \"Vector3\": {\r\n            return <GlType.Vector3 key={nodeState.id} {...props} />\r\n        }\r\n        case \"Vector4\": {\r\n            return <GlType.Vector4 key={nodeState.id} {...props} />\r\n        }\r\n        case \"Matrix3\": {\r\n            return <GlType.Matrix3 key={nodeState.id} {...props} />\r\n        }\r\n        case \"Matrix4\": {\r\n            return <GlType.Matrix4 key={nodeState.id} {...props} />\r\n        }\r\n        case \"select\": {\r\n            return <GLComp.GlSelect key={nodeState.id} {...props} />\r\n        }\r\n    }\r\n}\r\n","import { GLContext, BufferType, GLBuffer, BufferUsage, GLProgram, GLDataType } from \"./GLContext\";\r\n\r\nexport class VertexBuffer {\r\n    buffer: GLBuffer = 0\r\n    constructor() {\r\n        this.buffer = GLContext.CreateBuffer();\r\n    }\r\n\r\n    BufferData(data: ArrayBuffer) {\r\n        this.Bind();\r\n        GLContext.BufferData(BufferType.ARRAY_BUFFER, data, BufferUsage.STATIC_DRAW);\r\n    }\r\n\r\n    Bind() {\r\n        GLContext.BindBuffer(BufferType.ARRAY_BUFFER, this.buffer);\r\n    }\r\n\r\n    Delete() {\r\n        GLContext.DeleteBuffer(this.buffer);\r\n    }\r\n}\r\n\r\n\r\nexport class IndexBuffer {\r\n    buffer: GLBuffer = 0\r\n    constructor() {\r\n        this.buffer = GLContext.CreateBuffer();\r\n    }\r\n\r\n    BufferData(data: ArrayBuffer) {\r\n        GLContext.BufferData(BufferType.ELEMENT_ARRAY_BUFFER, data, BufferUsage.STATIC_DRAW);\r\n    }\r\n\r\n    Bind() {\r\n        GLContext.BindBuffer(BufferType.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n\r\n    Delete() {\r\n        GLContext.DeleteBuffer(this.buffer);\r\n    }\r\n}\r\n\r\nexport class QuadBuffer {\r\n    static vertices = [\r\n        1.0, 1.0, 0.0, 1.0, 1.0,\r\n        -1.0, 1.0, 0.0, 0.0, 1.0,\r\n        1.0, -1.0, 0.0, 1.0, 0.0,\r\n        -1.0, -1.0, 0.0, 0.0, 0.0];\r\n    static verticesBuffer = new Float32Array(QuadBuffer.vertices);\r\n}\r\n\r\nexport class VertexArray {\r\n    indexBuffer: IndexBuffer = IndexBuffer.prototype;\r\n    vertexBuffer: VertexBuffer = VertexBuffer.prototype;\r\n\r\n    AddVertexBuffer(vertexBuffer: VertexBuffer) {\r\n        this.vertexBuffer = vertexBuffer;\r\n    }\r\n\r\n    Bind() {\r\n        this.vertexBuffer.Bind();\r\n    }\r\n\r\n    SetUpAttribs(program: GLProgram) {\r\n        // const vPosLocation = GLContext.GetAttribLocation(program, \"aPos\");\r\n        // this.vertexBuffer.Bind();\r\n        // GLContext.EnableVertexAtrribArray(vPosLocation);\r\n        // GLContext.VertexAttribPointer(vPosLocation, 3, GLDataType.FLOAT, false, 0, 0);\r\n\r\n        const aVertexPosLocation = GLContext.GetAttribLocation(program, \"aVertexPos\");\r\n        const aTexCoordLocation = GLContext.GetAttribLocation(program, \"aTexCoord\");\r\n\r\n        this.vertexBuffer.Bind();\r\n        GLContext.EnableVertexAtrribArray(aVertexPosLocation);\r\n        GLContext.EnableVertexAtrribArray(aTexCoordLocation);\r\n\r\n        GLContext.VertexAttribPointer(aVertexPosLocation, 3, GLDataType.FLOAT, false, 20, 0);\r\n        GLContext.VertexAttribPointer(aTexCoordLocation, 2, GLDataType.FLOAT, false, 20, 4 * 3);\r\n    }\r\n\r\n}","import { Vec2 } from \"Utils/helper\";\r\nimport * as WEBGL from \"./GLContext\";\r\n\r\nexport class GLShader {\r\n    program: WEBGL.GLProgram = 0;\r\n\r\n    InitShader(vertexSource: string, fragmentSource: string) {\r\n        let vertexShader = this.CompilerShader(WEBGL.ShaderType.VERTEX, vertexSource);\r\n        let fragmentShader = this.CompilerShader(WEBGL.ShaderType.FRAGMENT, fragmentSource);\r\n\r\n        this.program = WEBGL.GLContext.CreateProgram();\r\n        WEBGL.GLContext.AttachShader(this.program, vertexShader);\r\n        WEBGL.GLContext.AttachShader(this.program, fragmentShader);\r\n        WEBGL.GLContext.LinkProgram(this.program);\r\n\r\n        if (!WEBGL.GLContext.GetProgramParameter(this.program, WEBGL.ShaderParameter.LINK_STATUS)) {\r\n            console.log(\"shader link error\");\r\n\r\n            WEBGL.g_glErrors.AddError(\"Shader Link Error\");\r\n        }\r\n        WEBGL.GLContext.DetachShader(this.program, vertexShader);\r\n        WEBGL.GLContext.DetachShader(this.program, fragmentShader);\r\n\r\n        WEBGL.GLContext.DeleteShader(vertexShader);\r\n        WEBGL.GLContext.DeleteShader(fragmentShader);\r\n\r\n    }\r\n\r\n    UploadUniformFloat(name: string, value: number) {\r\n        WEBGL.GLContext.SetUniformFloat(this.program, name, value);\r\n    }\r\n\r\n    UploadUniformVec2(name: string, value: Vec2) {\r\n        WEBGL.GLContext.SetUniformVec2(this.program, name, value);\r\n    }\r\n\r\n    Update(vertexSource: string, fragmentSource: string) {\r\n        this.Bind();\r\n        let vertexShader = this.CompilerShader(WEBGL.ShaderType.VERTEX, vertexSource);\r\n        let fragmentShader = this.CompilerShader(WEBGL.ShaderType.FRAGMENT, fragmentSource);\r\n        WEBGL.GLContext.AttachShader(this.program, vertexShader);\r\n        WEBGL.GLContext.AttachShader(this.program, fragmentShader);\r\n        WEBGL.GLContext.LinkProgram(this.program);\r\n\r\n        if (!WEBGL.GLContext.GetProgramParameter(this.program, WEBGL.ShaderParameter.LINK_STATUS)) {\r\n            console.log(\"shader link error\");\r\n\r\n            WEBGL.g_glErrors.AddError(\"Shader Link Error\");\r\n        }\r\n        WEBGL.GLContext.DetachShader(this.program, vertexShader);\r\n        WEBGL.GLContext.DetachShader(this.program, fragmentShader);\r\n\r\n        WEBGL.GLContext.DeleteShader(vertexShader);\r\n        WEBGL.GLContext.DeleteShader(fragmentShader);\r\n\r\n    }\r\n\r\n    Bind() {\r\n        WEBGL.GLContext.UseProgram(this.program);\r\n    }\r\n\r\n    Delete() {\r\n        WEBGL.GLContext.DeleteProgram(this.program);\r\n    }\r\n\r\n    private CompilerShader(shaderType: WEBGL.ShaderType, shaderSource: string) {\r\n        let shader = WEBGL.GLContext.CreateShader(shaderType);\r\n        WEBGL.GLContext.ShaderSource(shader, shaderSource);\r\n        WEBGL.GLContext.CompileShader(shader);\r\n\r\n        if (!WEBGL.GLContext.GetShaderParameter(shader, WEBGL.ShaderParameter.COMPILE_STATUS)) {\r\n            console.log(WEBGL.GLContext.GetShaderInfoLog(shader));\r\n            WEBGL.g_glErrors.AddError(WEBGL.GLContext.GetShaderInfoLog(shader));\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n\r\n}","import { GLContext, GLTexture } from \"./GLContext\";\r\nimport { Renderer } from \"./GLRenderer\";\r\n\r\nexport class GLTexture2D {\r\n    static texture0: GLTexture | null = null;\r\n    static texture1: GLTexture | null = null;\r\n    static texture2: GLTexture | null = null;\r\n    static texture3: GLTexture | null = null;\r\n\r\n\r\n    static Init() {\r\n        GLTexture2D.texture0 = GLContext.CreateTexture();\r\n        GLTexture2D.texture1 = GLContext.CreateTexture();\r\n        GLTexture2D.texture2 = GLContext.CreateTexture();\r\n        GLTexture2D.texture3 = GLContext.CreateTexture();\r\n        GLContext.SetTextureIndex(Renderer.shader.program, \"glTexture0\", 0);\r\n        GLContext.SetTextureIndex(Renderer.shader.program, \"glTexture1\", 1);\r\n        GLContext.SetTextureIndex(Renderer.shader.program, \"glTexture2\", 2);\r\n        GLContext.SetTextureIndex(Renderer.shader.program, \"glTexture3\", 3);\r\n\r\n\r\n    }\r\n\r\n    static BindTexture(index: number) {\r\n        switch (index) {\r\n            case (0): {\r\n                GLContext.ActivateTexture(0);\r\n                GLContext.BindTexture(GLTexture2D.texture0 as GLTexture);\r\n                break;\r\n            }\r\n\r\n            case (1): {\r\n                GLContext.ActivateTexture(1);\r\n                GLContext.BindTexture(GLTexture2D.texture1 as GLTexture);\r\n                break;\r\n            }\r\n\r\n            case (2): {\r\n                GLContext.ActivateTexture(2);\r\n                GLContext.BindTexture(GLTexture2D.texture2 as GLTexture);\r\n                break;\r\n            }\r\n            case (3): {\r\n                GLContext.ActivateTexture(3);\r\n                GLContext.BindTexture(GLTexture2D.texture3 as GLTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    static UpdateTexture(index: number, img: TexImageSource) {\r\n        GLTexture2D.BindTexture(index);\r\n        GLContext.SetTexture(img.width, img.height, img);\r\n        GLContext.SetTextureParams();\r\n    }\r\n}","import { oldMousePos } from \"Componets/Tabs/GraphTab\";\r\nimport { glCanvasRef } from \"Componets/Tabs/RenderTab\";\r\nimport { QuadBuffer, VertexArray, VertexBuffer } from \"./Buffer\";\r\nimport { GLContext, PrimitiveMode } from \"./GLContext\";\r\nimport { GLShader } from \"./GLShader\";\r\nimport { GLTexture2D } from \"./Texture\";\r\n\r\nconst vertexShaderSource = `\r\n        attribute vec3 aVertexPos;\r\n        attribute vec2 aTexCoord;\r\n\r\n        varying vec2 vTexCoord;\r\n        void main(void)\r\n        {\r\n            gl_Position = vec4(aVertexPos, 1.0);\r\n            vTexCoord = aTexCoord;\r\n        }`;\r\n\r\nconst fragmentShaderSource = `\r\nprecision mediump float;\r\nprecision mediump int;\r\nvarying vec2 vTexCoord;\r\nuniform float iTime;\r\nuniform vec2 iResolution;\r\nuniform vec2 iMouseCoords;\r\nuniform sampler2D glTexture0;\r\nuniform sampler2D glTexture1;\r\nuniform sampler2D glTexture2;\r\nuniform sampler2D glTexture3;\r\nvoid main(void)\r\n{\r\n    vec2 uv = gl_FragCoord.xy / iResolution;\r\n    vec3 col = 0.5 + 0.5 * cos((iTime * 0.001) + uv.xyx + vec3(0, 2, 4));\r\n    gl_FragColor = vec4(col, 1.0);\r\n}\r\n`\r\n\r\nexport class Renderer {\r\n    static created = false;\r\n    static shader: GLShader;\r\n    static vertexArray: VertexArray;\r\n\r\n    static Create() {\r\n        if (Renderer.created)\r\n            return;\r\n        Renderer.created = true;\r\n\r\n        Renderer.shader = new GLShader();\r\n        Renderer.shader.InitShader(vertexShaderSource, fragmentShaderSource);\r\n        const vertexBuffer = new VertexBuffer();\r\n        vertexBuffer.BufferData(QuadBuffer.verticesBuffer);\r\n        Renderer.vertexArray = new VertexArray();\r\n        Renderer.vertexArray.AddVertexBuffer(vertexBuffer);\r\n        Renderer.vertexArray.SetUpAttribs(Renderer.shader.program);\r\n        Renderer.shader.Bind();\r\n        GLTexture2D.Init();\r\n    }\r\n\r\n    static UpdateCompiledShader(shaderSource: string) {\r\n        let _fragmentShaderSource = ` \r\nprecision mediump float;\r\nprecision mediump int;\r\nuniform float iTime;\r\nuniform vec2 iResolution;\r\nuniform vec2 iMouseCoords;\r\nuniform sampler2D glTexture0;\r\nuniform sampler2D glTexture1;\r\nuniform sampler2D glTexture2;\r\nuniform sampler2D glTexture3;\r\nvoid main(void)\r\n{\r\n    ${shaderSource}\r\n}\r\n`\r\n        Renderer.UpdateShaders(vertexShaderSource, _fragmentShaderSource);\r\n        return _fragmentShaderSource;\r\n    }\r\n\r\n    static UpdateShaders(vertexSource: string, fragmentSource: string) {\r\n        Renderer.shader.Update(vertexSource, fragmentSource);\r\n    }\r\n\r\n    static OnRender(time: number) {\r\n        if (!Renderer.created)\r\n            return;\r\n\r\n        requestAnimationFrame(Renderer.OnRender);\r\n        Renderer.shader.Bind();\r\n        Renderer.shader.UploadUniformFloat(\"iTime\", time);\r\n        Renderer.shader.UploadUniformVec2(\"iResolution\", { x: glCanvasRef.current?.getBoundingClientRect().width as number, y: glCanvasRef.current?.getBoundingClientRect().height as number });\r\n        Renderer.shader.UploadUniformVec2(\"iMouse\", { x: oldMousePos.x, y: oldMousePos.y });\r\n        GLTexture2D.BindTexture(0);\r\n        GLTexture2D.BindTexture(1);\r\n        GLTexture2D.BindTexture(2);\r\n        GLTexture2D.BindTexture(3);\r\n        Renderer.vertexArray.Bind();\r\n\r\n        GLContext.SetClearColor(0.0, 0.0, 0.0, 0.0);\r\n        GLContext.ClearColorBuffer();\r\n\r\n        Renderer.DrawQuad();\r\n    }\r\n\r\n    static DrawQuad() {\r\n        GLContext.DrawArrays(PrimitiveMode.TRIANGLE_STRIP, 4);\r\n    }\r\n}","import { textureViewPanelRef } from \"App\";\r\nimport React, { useRef } from \"react\";\r\nimport { useAppSelector } from \"reduxStore/hooks\";\r\nimport { getGLGraphToGLSLDataType } from \"Utils/helper\";\r\nimport { Renderer } from \"WebGL/GLRenderer\";\r\nimport { GLTexture2D } from \"WebGL/Texture\";\r\nimport { showContext } from \"./Tabs/GraphTab\";\r\n\r\nlet compiledCode = \"\"\r\n\r\n\r\n\r\nconst CodeIcon = () => {\r\n    return (\r\n        <svg className=\"svg-icon\" focusable=\"false\" viewBox=\"0 0 30 30\" aria-hidden=\"true\">\r\n            <path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"></path>\r\n        </svg>\r\n    )\r\n}\r\nexport const CompileButton = () => {\r\n    const nodeState = useAppSelector((state) => state.nodesFilter.nodeStates);\r\n    let shaderCode = \"\";\r\n    const compileGraph = () => {\r\n        shaderCode = \"\";\r\n        nodeState.forEach((nodeElement) => {\r\n            if (nodeElement.nodeName != \"gl_FragColor\") {\r\n                if (nodeElement.nodeName != \"undefined\")\r\n                    shaderCode += `${getGLGraphToGLSLDataType(nodeElement.nodeDataType)} _${nodeElement.id} = ${nodeElement.props.nodeDataValue.value};\\n`;\r\n            }\r\n            else {\r\n                shaderCode += `gl_FragColor = ${nodeElement.props.nodeDataValue.value};`\r\n            }\r\n        });\r\n        compiledCode = Renderer.UpdateCompiledShader(shaderCode);\r\n    }\r\n\r\n    return (\r\n        <div className=\"CompileButton\" onClick={() => compileGraph()}>\r\n            <CodeIcon />\r\n            <div>Compile</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AddNodeButton = () => {\r\n    const addNewNode = (event: React.MouseEvent) => {\r\n        const thisElem = event.currentTarget;\r\n        showContext({ x: thisElem.getBoundingClientRect().left, y: thisElem.getBoundingClientRect().bottom + 20 });\r\n    }\r\n\r\n    return (\r\n        <div className=\"AddButton\" onClick={addNewNode}>\r\n            <AddIcon />\r\n            <div>Add Node</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddIcon = () => {\r\n    return (\r\n        <svg className=\"svg-icon\" focusable=\"false\" viewBox=\"0 0 30 30 \" aria-hidden=\"true\">\r\n            <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"></path>\r\n        </svg>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport const UploadTexture = () => {\r\n    const handleClick = (event: React.MouseEvent) => {\r\n        textureViewPanelRef.current?.classList.toggle(\"Active\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"AddButton\" onClick={handleClick}>\r\n            <AddIcon />\r\n            <div>Upload Texture</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Texture: React.FC<{ index: number }> = (props) => {\r\n    const fileInputRef = useRef<HTMLInputElement>(HTMLInputElement.prototype);\r\n    const imgRef = useRef(HTMLImageElement.prototype);\r\n\r\n    const handleImageFile = () => {\r\n        const inputElem = fileInputRef.current;\r\n        const imgElem = imgRef.current;\r\n        const imageFile = inputElem.files as FileList;\r\n        if (imageFile.item(0)) {\r\n            imgElem.src = URL.createObjectURL(imageFile.item(0) as File);\r\n            imgElem.onload = () => {\r\n                GLTexture2D.UpdateTexture(props.index, imgElem);\r\n                URL.revokeObjectURL(inputElem.src);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"TextureView\">\r\n            <div className=\"TextureViewInput\">\r\n                <input onChange={handleImageFile} accept=\".png\" ref={fileInputRef} type=\"file\" name=\"\" id=\"\" className=\"TextureInput\" />\r\n                <img ref={imgRef} src=\"\" alt=\"\" width={\"100%\"} />\r\n            </div>\r\n            <button onClick={(event) => {\r\n                const inputElem = fileInputRef.current;\r\n                inputElem.click();\r\n                event.preventDefault();\r\n            }}>Upload</button>\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\nexport const TextureViewPanel = React.forwardRef<HTMLDivElement, any>((props, ref) => {\r\n    return (\r\n        <div ref={ref} className=\"TextureViewPanel\">\r\n            <Texture key={0} index={0} />\r\n            <Texture key={1} index={1} />\r\n            <Texture key={2} index={2} />\r\n            <Texture key={3} index={3} />\r\n\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\n// export const CodeView = () => {\r\n//     return (\r\n//         <div className={\"CodeView\"}>\r\n//             <code>\r\n//                 {\r\n\r\n//                 }\r\n//             </code>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n// export const SaveButton = () => {\r\n\r\n//     return (\r\n//         <div className=\"SaveButton\" onClick={() => saveToStorage}>\r\n//             <Save viewBox={\"0 0 30 30\"} />\r\n\r\n//             <div >\r\n//                 Save\r\n//             </div>\r\n//         </div >\r\n//     )\r\n// }\r\n\r\n\r\n// export const ShowCompiledCode = () => {\r\n//     const addNewNode = () => {\r\n\r\n//     }\r\n\r\n//     return (\r\n//         //  <div className=\"CompileButton\" onClick={() => addNewNode}>\r\n//         <SaveIcon />\r\n//         //    Show Code\r\n//         //    </div>\r\n//     )\r\n// }\r\n\r\n","import { AddNodeButton, CompileButton, TextureViewPanel, UploadTexture } from \"Componets/Menus\";\r\nimport React from \"react\";\r\nimport { ShaderGraphWindow } from \"./ShaderGraphWindow\";\r\n\r\n\r\nconst AppHeader = () => {\r\n\treturn (\r\n\t\t<div className=\"AppHeader\">\r\n\t\t\t<div className=\"AppName\">\r\n\t\t\t\tGLGraph\r\n\t\t\t</div>\r\n\t\t\t<div style={{ display: \"flex\" }}>\r\n\t\t\t\t<AddNodeButton />\r\n\t\t\t\t<UploadTexture />\r\n\t\t\t\t<CompileButton />\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport const textureViewPanelRef = React.createRef<HTMLDivElement>();\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppHeader />\r\n\t\t\t<ShaderGraphWindow />\r\n\t\t\t<TextureViewPanel ref={textureViewPanelRef} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n\n","import { combineReducers } from \"redux\";\r\nimport { nodesFilter, connectorFilter } from \"./nodesFilter\";\r\n\r\nexport default combineReducers({ nodesFilter, connectorFilter });","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport nodesFilter from \"../reducers\";\r\n\r\n\r\nconst store = createStore(nodesFilter, compose(applyMiddleware(thunk)));\r\n\r\nexport type RootDispatch = ReturnType<typeof store.dispatch>;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport default store;\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"./index.css\"\r\nimport \"./style.css\"\r\nimport reducers from './reducers';\r\nimport store from './reduxStore';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}